// CORRE√á√ÉO PRINCIPAL: Aplicar tema escuro no body E na splash screen ANTES dela aparecer
;(() => {
  const savedTheme = localStorage.getItem("theme") || "light"
  if (savedTheme === "dark") {
    document.body.classList.add("dark-mode")
    // CORRE√á√ÉO: Aplicar dark-mode na splash screen tamb√©m
    const splashScreen = document.getElementById("splashScreen")
    if (splashScreen) {
      splashScreen.classList.add("dark-mode")
    }
  }
})()

// NOVA FUNCIONALIDADE: Sistema de expira√ß√£o de 30 dias para lead capture
function checkLeadCaptureExpiration() {
  const leadCaptured = localStorage.getItem("grupofullano_lead_captured")
  const leadCaptureDate = localStorage.getItem("grupofullano_lead_capture_date")

  if (leadCaptured === "true" && leadCaptureDate) {
    const captureDate = new Date(leadCaptureDate)
    const currentDate = new Date()
    const daysDifference = Math.floor((currentDate - captureDate) / (1000 * 60 * 60 * 24))

    // Se passaram 30 dias ou mais, resetar o lead capture
    if (daysDifference >= 30) {
      localStorage.removeItem("grupofullano_lead_captured")
      localStorage.removeItem("grupofullano_lead_capture_date")
      localStorage.removeItem("grupofullano_cookies_dismissed")
      localStorage.removeItem("grupofullano_cookies_accepted")
      console.log("‚úÖ Lead capture expirado ap√≥s 30 dias - formul√°rio dispon√≠vel novamente")
      return false // Formul√°rio deve aparecer
    }

    return true // Ainda dentro dos 30 dias
  }

  return false // Nunca preencheu o formul√°rio
}

// NOVA FUNCIONALIDADE: Sistema de cookies para usu√°rios que j√° preencheram o lead
function initializeCookieNotification() {
  // Verificar se o usu√°rio j√° preencheu o lead e est√° dentro dos 30 dias
  const leadCaptured = localStorage.getItem("grupofullano_lead_captured")
  const leadCaptureDate = localStorage.getItem("grupofullano_lead_capture_date")
  const cookiesDismissed = localStorage.getItem("grupofullano_cookies_dismissed")

  if (leadCaptured === "true" && leadCaptureDate && !cookiesDismissed) {
    const captureDate = new Date(leadCaptureDate)
    const currentDate = new Date()
    const daysDifference = Math.floor((currentDate - captureDate) / (1000 * 60 * 60 * 24))

    // Se ainda est√° dentro dos 30 dias, mostrar notifica√ß√£o de cookies
    if (daysDifference < 30) {
      setTimeout(() => {
        showCookieNotification()
      }, 2000) // Mostrar ap√≥s 2 segundos
    }
  }
}

function showCookieNotification() {
  // Verificar se j√° existe uma notifica√ß√£o
  if (document.getElementById("cookieNotification")) {
    return
  }

  const cookieNotification = document.createElement("div")
  cookieNotification.id = "cookieNotification"
  cookieNotification.className = "cookie-notification"

  const currentLanguage = localStorage.getItem("preferredLanguage") || "pt"

  const cookieTexts = {
    pt: {
      title: "üç™ Cookies e Experi√™ncia",
      message:
        "Utilizamos cookies e tecnologias similares para melhorar sua experi√™ncia de navega√ß√£o, personalizar conte√∫do e analisar nosso tr√°fego. Seus dados est√£o seguros conosco.",
      accept: "Aceitar",
      decline: "Recusar",
      settings: "Configura√ß√µes",
    },
    en: {
      title: "üç™ Cookies & Experience",
      message:
        "We use cookies and similar technologies to improve your browsing experience, personalize content and analyze our traffic. Your data is safe with us.",
      accept: "Accept",
      decline: "Decline",
      settings: "Settings",
    },
    es: {
      title: "üç™ Cookies y Experiencia",
      message:
        "Utilizamos cookies y tecnolog√≠as similares para mejorar tu experiencia de navegaci√≥n, personalizar contenido y analizar nuestro tr√°fico. Tus datos est√°n seguros con nosotros.",
      accept: "Aceptar",
      decline: "Rechazar",
      settings: "Configuraciones",
    },
  }

  const texts = cookieTexts[currentLanguage] || cookieTexts.pt

  cookieNotification.innerHTML = `
    <div class="cookie-content">
      <div class="cookie-header">
        <h3 class="cookie-title">${texts.title}</h3>
        <button class="cookie-close" id="cookieClose">
          <i class="fas fa-times"></i>
        </button>
      </div>
      <p class="cookie-message">${texts.message}</p>
      <div class="cookie-actions">
        <button class="cookie-btn cookie-btn-accept" id="cookieAccept">${texts.accept}</button>
        <button class="cookie-btn cookie-btn-decline" id="cookieDecline">${texts.decline}</button>
        <button class="cookie-btn cookie-btn-settings" id="cookieSettings">${texts.settings}</button>
      </div>
    </div>
  `

  // Adicionar estilos CSS
  const cookieStyles = document.createElement("style")
  cookieStyles.textContent = `
    .cookie-notification {
      position: fixed;
      bottom: 20px;
      right: 20px;
      max-width: 400px;
      width: calc(100vw - 40px);
      background: white;
      border-radius: 1rem;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
      z-index: 9999;
      opacity: 0;
      transform: translateY(100px);
      transition: all 0.4s ease;
      border: 2px solid #e5e7eb;
    }

    .cookie-notification.show {
      opacity: 1;
      transform: translateY(0);
    }

    .cookie-content {
      padding: 1.5rem;
    }

    .cookie-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1rem;
    }

    .cookie-title {
      font-family: "NeueAlteGrotesk-Bold", sans-serif;
      font-size: 1.1rem;
      color: #265a96;
      margin: 0;
    }

    .cookie-close {
      background: none;
      border: none;
      color: #6b7280;
      cursor: pointer;
      padding: 0.25rem;
      border-radius: 0.25rem;
      transition: all 0.3s ease;
    }

    .cookie-close:hover {
      background: #f3f4f6;
      color: #374151;
    }

    .cookie-message {
      font-family: "NeueAlteGrotesk-Regular", sans-serif;
      color: #666;
      font-size: 0.875rem;
      line-height: 1.5;
      margin: 0 0 1.5rem 0;
    }

    .cookie-actions {
      display: flex;
      gap: 0.5rem;
      flex-wrap: wrap;
    }

    .cookie-btn {
      padding: 0.5rem 1rem;
      border-radius: 0.5rem;
      font-size: 0.875rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      font-family: "NeueAlteGrotesk-Bold", sans-serif;
      border: none;
      flex: 1;
      min-width: 80px;
    }

    .cookie-btn-accept {
      background: linear-gradient(to right, #1c7dff, #0051c4);
      color: white;
    }

    .cookie-btn-accept:hover {
      background: linear-gradient(to right, #2289ff, #1c7dff);
      transform: translateY(-1px);
    }

    .cookie-btn-decline {
      background: #f3f4f6;
      color: #374151;
      border: 1px solid #d1d5db;
    }

    .cookie-btn-decline:hover {
      background: #e5e7eb;
    }

    .cookie-btn-settings {
      background: transparent;
      color: #2563eb;
      border: 1px solid #2563eb;
    }

    .cookie-btn-settings:hover {
      background: #2563eb;
      color: white;
    }

    /* Dark mode styles */
    body.dark-mode .cookie-notification {
      background: #0a1525;
      border-color: #3b82f6;
    }

    body.dark-mode .cookie-title {
      color: #60a5fa;
    }

    body.dark-mode .cookie-message {
      color: #e2e8f0;
    }

    body.dark-mode .cookie-close {
      color: #9ca3af;
    }

    body.dark-mode .cookie-close:hover {
      background: #374151;
      color: #d1d5db;
    }

    body.dark-mode .cookie-btn-decline {
      background: #374151;
      color: #d1d5db;
      border-color: #4b5563;
    }

    body.dark-mode .cookie-btn-decline:hover {
      background: #4b5563;
    }

    body.dark-mode .cookie-btn-settings {
      color: #60a5fa;
      border-color: #60a5fa;
    }

    body.dark-mode .cookie-btn-settings:hover {
      background: #60a5fa;
      color: #1a1a1a;
    }

    /* Mobile responsive */
    @media (max-width: 768px) {
      .cookie-notification {
        bottom: 10px;
        right: 10px;
        left: 10px;
        max-width: none;
        width: auto;
      }

      .cookie-content {
        padding: 1rem;
      }

      .cookie-actions {
        flex-direction: column;
      }

      .cookie-btn {
        flex: none;
        width: 100%;
      }
    }

    @media (max-width: 480px) {
      .cookie-title {
        font-size: 1rem;
      }

      .cookie-message {
        font-size: 0.8rem;
      }

      .cookie-btn {
        padding: 0.75rem 1rem;
      }
    }
  `

  document.head.appendChild(cookieStyles)
  document.body.appendChild(cookieNotification)

  // Mostrar com anima√ß√£o
  setTimeout(() => {
    cookieNotification.classList.add("show")
  }, 100)

  // Event listeners
  document.getElementById("cookieClose").addEventListener("click", dismissCookieNotification)
  document.getElementById("cookieAccept").addEventListener("click", acceptCookies)
  document.getElementById("cookieDecline").addEventListener("click", declineCookies)
  document.getElementById("cookieSettings").addEventListener("click", showCookieSettings)
}

function dismissCookieNotification() {
  const notification = document.getElementById("cookieNotification")
  if (notification) {
    notification.classList.remove("show")
    setTimeout(() => {
      notification.remove()
    }, 400)
    localStorage.setItem("grupofullano_cookies_dismissed", "true")
  }
}

function acceptCookies() {
  localStorage.setItem("grupofullano_cookies_accepted", "true")
  localStorage.setItem("grupofullano_cookies_dismissed", "true")
  dismissCookieNotification()

  // Mostrar toast de confirma√ß√£o
  showToast("‚úÖ Cookies aceitos! Obrigado por melhorar sua experi√™ncia conosco.", "success")
}

function declineCookies() {
  localStorage.setItem("grupofullano_cookies_accepted", "false")
  localStorage.setItem("grupofullano_cookies_dismissed", "true")
  dismissCookieNotification()

  // Mostrar toast de confirma√ß√£o
  showToast("‚ùå Cookies recusados. Voc√™ ainda pode alterar isso nas configura√ß√µes.", "info")
}

function showCookieSettings() {
  // Implementar modal de configura√ß√µes de cookies (opcional)
  alert("Configura√ß√µes de cookies em desenvolvimento. Por enquanto, use os bot√µes Aceitar/Recusar.")
}

// NOVA FUN√á√ÉO: Toast notification system
function showToast(message, type = "info", duration = 4000) {
  // Remove existing toast if any
  const existingToast = document.getElementById("toast-notification")
  if (existingToast) {
    existingToast.remove()
  }

  const toast = document.createElement("div")
  toast.id = "toast-notification"
  toast.className = `toast-notification toast-${type}`

  toast.innerHTML = `
    <div class="toast-content">
      <span class="toast-message">${message}</span>
      <button class="toast-close" onclick="this.parentElement.parentElement.remove()">
        <i class="fas fa-times"></i>
      </button>
    </div>
  `

  // Add toast styles if not already added
  if (!document.getElementById("toast-styles")) {
    const toastStyles = document.createElement("style")
    toastStyles.id = "toast-styles"
    toastStyles.textContent = `
      .toast-notification {
        position: fixed;
        top: 20px;
        right: 20px;
        max-width: 400px;
        background: white;
        border-radius: 0.75rem;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        z-index: 10000;
        opacity: 0;
        transform: translateX(100%);
        transition: all 0.4s ease;
        border-left: 4px solid #3b82f6;
      }

      .toast-notification.toast-success {
        border-left-color: #10b981;
      }

      .toast-notification.toast-error {
        border-left-color: #dc2626;
      }

      .toast-notification.toast-warning {
        border-left-color: #f59e0b;
      }

      .toast-notification.show {
        opacity: 1;
        transform: translateX(0);
      }

      .toast-content {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 1rem 1.25rem;
        gap: 1rem;
      }

      .toast-message {
        font-family: "NeueAlteGrotesk-Regular", sans-serif;
        color: #374151;
        font-size: 0.875rem;
        line-height: 1.4;
      }

      .toast-close {
        background: none;
        border: none;
        color: #6b7280;
        cursor: pointer;
        padding: 0.25rem;
        border-radius: 0.25rem;
        transition: all 0.3s ease;
        flex-shrink: 0;
      }

      .toast-close:hover {
        background: #f3f4f6;
        color: #374151;
      }

      body.dark-mode .toast-notification {
        background: #1f2937;
      }

      body.dark-mode .toast-message {
        color: #e5e7eb;
      }

      body.dark-mode .toast-close {
        color: #9ca3af;
      }

      body.dark-mode .toast-close:hover {
        background: #374151;
        color: #d1d5db;
      }

      @media (max-width: 768px) {
        .toast-notification {
          top: 10px;
          right: 10px;
          left: 10px;
          max-width: none;
        }
      }
    `
    document.head.appendChild(toastStyles)
  }

  document.body.appendChild(toast)

  // Show with animation
  setTimeout(() => {
    toast.classList.add("show")
  }, 100)

  // Auto remove after duration
  setTimeout(() => {
    toast.classList.remove("show")
    setTimeout(() => {
      if (toast.parentElement) {
        toast.remove()
      }
    }, 400)
  }, duration)
}

function initializeTheme() {
  const isDarkMode = localStorage.getItem("darkMode") === "true"
  const themeToggle = document.querySelector(".theme-toggle")
  const themeIcon = themeToggle.querySelector("i")

  if (isDarkMode) {
    document.body.classList.add("dark-mode")
    themeIcon.className = "ph ph-sun"
  } else {
    document.body.classList.remove("dark-mode")
    themeIcon.className = "ph ph-moon"
  }
}

// Mobile menu toggle
const mobileMenuBtn = document.getElementById("mobileMenuBtn")
const navMenu = document.getElementById("navMenu")

mobileMenuBtn.addEventListener("click", () => {
  navMenu.classList.toggle("active")
})

// Close mobile menu when clicking on a link
navMenu.addEventListener("click", (e) => {
  if (e.target.tagName === "A") {
    navMenu.classList.remove("active")
  }
})

// Splash Screen - CORRE√á√ÉO: Aplicar tema escuro na splash screen
window.addEventListener("load", () => {
  // CORRE√á√ÉO: Verificar e aplicar tema escuro na splash screen
  const savedTheme = localStorage.getItem("theme") || "light"
  const splashScreen = document.getElementById("splashScreen")

  if (savedTheme === "dark" && splashScreen) {
    splashScreen.classList.add("dark-mode")
  }

  setTimeout(() => {
    splashScreen.classList.add("fade-out")
    setTimeout(() => {
      splashScreen.style.display = "none"
    }, 500)
  }, 2500)
})

// Theme Toggle Functionality
const themeToggle = document.getElementById("themeToggle")
const themeIcon = document.getElementById("themeIcon")
const body = document.body

// Check for saved theme preference or default to light mode
const savedTheme = localStorage.getItem("theme") || "light"

// Apply saved theme on page load - CORRE√á√ÉO: Incluir splash screen
if (savedTheme === "dark") {
  body.classList.add("dark-mode")
  themeIcon.className = "fas fa-moon"
  // CORRE√á√ÉO: Aplicar na splash screen tamb√©m
  const splashScreen = document.getElementById("splashScreen")
  if (splashScreen) {
    splashScreen.classList.add("dark-mode")
  }
} else {
  body.classList.remove("dark-mode")
  themeIcon.className = "fas fa-sun"
}

// Theme toggle event listener - CORRE√á√ÉO: Incluir splash screen
themeToggle.addEventListener("click", () => {
  body.classList.toggle("dark-mode")
  const splashScreen = document.getElementById("splashScreen")

  if (body.classList.contains("dark-mode")) {
    themeIcon.className = "fas fa-moon"
    localStorage.setItem("theme", "dark")
    // CORRE√á√ÉO: Aplicar na splash screen tamb√©m
    if (splashScreen) {
      splashScreen.classList.add("dark-mode")
    }
  } else {
    themeIcon.className = "fas fa-sun"
    localStorage.setItem("theme", "light")
    // CORRE√á√ÉO: Remover da splash screen tamb√©m
    if (splashScreen) {
      splashScreen.classList.remove("dark-mode")
    }
  }
})

// Locations data with translations
const locations = [
  {
    name: "Fullano Praia",
    description: {
      pt: "Ei! Venha para o Fullano Praia, no Bessa! Saboreie nossos frutos do mar frescos e um chopp gelado, tudo com m√∫sica ao vivo. Relaxe e viva aquela vibe massa em Jo√£o Pessoa!",
      en: "Hey! Come to Fullano Praia, in Bessa! Enjoy our fresh seafood and cold beer, all with live music. Relax and live that amazing vibe in Jo√£o Pessoa!",
      es: "¬°Oye! ¬°Ven a Fullano Praia, en Bessa! Disfruta de nuestros mariscos frescos y cerveza fr√≠a, todo con m√∫sica en vivo. ¬°Rel√°jate y vive esa vibra incre√≠ble en Jo√£o Pessoa!",
    },
    rating: 4.4,
    reviews: 6850,
    image: "img/cardfullanolocalizacao.png",
    link: "https://grupofullano.github.io/fullanopraia/",
    irLink: "https://maps.app.goo.gl/H5w1hCYRnkRg3M6v8",
  },
  {
    name: "Lovina Seixas",
    description: {
      pt: "Seu para√≠so exclusivo √† beira-mar em Jo√£o Pessoa. Desfrute de lounges com Jacuzzi, culin√°ria local e vista deslumbrante para as Piscinas Naturais do Seixas. Celebre e relaxe conosco!",
      en: "Your exclusive seaside paradise in Jo√£o Pessoa. Enjoy lounges with Jacuzzi, local cuisine and stunning views of the Seixas Natural Pools. Celebrate and relax with us!",
      es: "Tu para√≠so exclusivo junto al mar en Jo√£o Pessoa. Disfruta de lounges con Jacuzzi, cocina local y vistas impresionantes de las Piscinas Naturales de Seixas. ¬°Celebra y rel√°jate con nosotros!",
    },
    rating: 4.2,
    reviews: 3934,
    image: "img/cardseixaslocalizacao.png",
    link: "https://grupofullano.github.io/lovinaseixas",
    irLink: "https://maps.app.goo.gl/gDMpRdXMAr8sgvy5A",
  },
  {
    name: "Golfinho Bar",
    description: {
      pt: "Comida boa, cerveja gelada e a melhor vista do mar. Desfrute de pratos regionais, frutos do mar frescos e petiscos em um ambiente descontra√≠do. Perfeito para fam√≠lia e amigos!",
      en: "Good food, cold beer and the best sea view. Enjoy regional dishes, fresh seafood and snacks in a relaxed atmosphere. Perfect for family and friends!",
      es: "Buena comida, cerveza fr√≠a y la mejor vista al mar. Disfruta de platos regionales, mariscos frescos y aperitivos en un ambiente relajado. ¬°Perfecto para familia y amigos!",
    },
    rating: 4.3,
    reviews: 5748,
    image: "img/cardgolfinholocalizacao.png",
    link: "https://grupofullano.github.io/golfinhobar",
    irLink: "https://maps.app.goo.gl/2EPTMRfM9gHwVZKD8",
  },
  {
    name: "Lovina Ponta de Campina",
    description: {
      pt: "Desfrute de frutos do mar frescos, culin√°ria regional e a cerveja mais gelada. Ambiente familiar, com m√∫sica ao vivo e muita alegria para um dia inesquec√≠vel de sol e mar.",
      en: "Enjoy fresh seafood, regional cuisine and the coldest beer. Family atmosphere, with live music and lots of joy for an unforgettable day of sun and sea.",
      es: "Disfruta de mariscos frescos, cocina regional y la cerveza m√°s fr√≠a. Ambiente familiar, con m√∫sica en vivo y mucha alegr√≠a para un d√≠a inolvidable de sol y mar.",
    },
    rating: 4.4,
    reviews: 9720,
    image: "img/cardtropicallocalizacao.png",
    link: "https://grupofullano.github.io/lovinapontadecampina",
    irLink: "https://maps.app.goo.gl/tWdQ5tE2XLXRp5eW9",
  },
  {
    name: "Rancho da Ema",
    description: {
      pt: "Uma experi√™ncia no cora√ß√£o do Cariri! Explore a 'Roli√∫de Nordestina' e o Lajedo de Pai Mateus, e desfrute de piscina e aut√™ntica comida regional. Venha vivenciar a magia do sert√£o!",
      en: "An experience in the heart of Cariri! Explore the 'Northeastern Hollywood' and Lajedo de Pai Mateus, and enjoy the pool and authentic regional food. Come experience the magic of the sert√£o!",
      es: "¬°Una experiencia en el coraz√≥n de Cariri! Explora el 'Hollywood del Nordeste' y el Lajedo de Pai Mateus, y disfruta de la piscina y aut√©ntica comida regional. ¬°Ven a vivir la magia del sert√£o!",
    },
    rating: 4.6,
    reviews: 47,
    image: "img/cardranchodaemalocalizacao.png",
    link: "https://grupofullano.github.io/ranchodaema",
    irLink: "https://maps.app.goo.gl/SposbsVwk455UTd59",
  },
]

// Gallery data
const galleryItems = [
  {
    image: "img/ambiente1.png",
    alt: "Ambiente 1",
    likes: 127,
    comments: 45,
    shares: 23,
  },
  {
    image: "img/ambiente2.png",
    alt: "Ambiente 2",
    likes: 89,
    comments: 32,
    shares: 18,
  },
  {
    image: "img/ambiente3.png",
    alt: "Ambiente 3",
    likes: 156,
    comments: 67,
    shares: 34,
  },
  {
    image: "img/ambiente4.png",
    alt: "Ambiente 4",
    likes: 203,
    comments: 78,
    shares: 41,
  },
  {
    image: "img/ambiente5.png",
    alt: "Ambiente 5",
    likes: 145,
    comments: 52,
    shares: 29,
  },
  {
    image: "img/ambiente6.png",
    alt: "Ambiente 6",
    likes: 178,
    comments: 63,
    shares: 37,
  },
  {
    image: "img/ambiente7.png",
    alt: "Ambiente 7",
    likes: 192,
    comments: 84,
    shares: 45,
  },
  {
    image: "img/ambiente8.png",
    alt: "Ambiente 8",
    likes: 167,
    comments: 71,
    shares: 38,
  },
]

// Testimonials data with translations
const testimonials = [
  {
    name: "Joel Hideki Takei",
    location: "Fullano Praia - Jo√£o Pessoa",
    rating: 5,
    text: {
      pt: "Ambiente gostoso a beira praia, estrutura muito boa de chuveiros e banheiros. Atendimento bom e local maravilhoso.",
      en: "Nice atmosphere by the beach, very good shower and bathroom facilities. Good service and wonderful location.",
      es: "Ambiente agradable junto a la playa, muy buena estructura de duchas y ba√±os. Buen servicio y lugar maravilloso.",
    },
    avatar: "img/avaliacao1.png",
  },
  {
    name: "Sidnei Pereira",
    location: "Lovina Ponta de Campina - Cabedelo",
    rating: 5,
    text: {
      pt: "Lindo lugar, beira mar, √°guas calmas, quentes, sem muitas ondas, muito agrad√°vel, show ao vivo, bastante mesas",
      en: "Beautiful place, seaside, calm, warm waters, without many waves, very pleasant, live show, plenty of tables",
      es: "Hermoso lugar, junto al mar, aguas tranquilas, c√°lidas, sin muchas olas, muy agradable, show en vivo, muchas mesas",
    },
    avatar: "img/avaliacao2.png",
  },
  {
    name: "Jaqueline Tamasauskas",
    location: "Golfinho Bar - Jo√£o Pessoa",
    rating: 5,
    text: {
      pt: "√ìtimo lugar, super ventilado, comida muito bem servida. Fomos muito bem atendido pelo ED. Recomendo",
      en: "Great place, super ventilated, very well served food. We were very well attended by ED. I recommend",
      es: "Excelente lugar, s√∫per ventilado, comida muy bien servida. Fuimos muy bien atendidos por ED. Lo recomiendo",
    },
    avatar: "img/avaliacao3.png",
  },
  {
    name: "Patricia Braga",
    location: "Lovina Seixas - Jo√£o Pessoa",
    rating: 5,
    text: {
      pt: "√ìtimo restaurante de praia, infratora boa com toaletes climatizados, chuveiros p√≥s mar, a praia em frente de √°gua morna turva, card√°pio com pre√ßos honestos",
      en: "Great beach restaurant, good infrastructure with air-conditioned toilets, post-sea showers, the beach in front with warm cloudy water, menu with honest prices",
      es: "Excelente restaurante de playa, buena infraestructura con ba√±os climatizados, duchas post-mar, la playa de enfrente con agua tibia turbia, men√∫ con precios honestos",
    },
    avatar: "img/avaliacao4.png",
  },
  {
    name: "Claudio Andre",
    location: "Rancho da Ema - Cabaceiras",
    rating: 5,
    text: {
      pt: "Do atendimento ao caf√© da manh√£. Da piscina aos atrativos. Da recep√ß√£o das mo√ßas a sa√≠da Sensacional. Ideal para acampar. Recomendo conhecer, visitar.",
      en: "From service to breakfast. From the pool to the attractions. From the girls' reception to the exit Sensational. Ideal for camping. I recommend getting to know, visiting.",
      es: "Desde el servicio hasta el desayuno. Desde la piscina hasta las atracciones. Desde la recepci√≥n de las chicas hasta la salida Sensacional. Ideal para acampar. Recomiendo conocer, visitar.",
    },
    avatar: "img/avaliacao5.png",
  },
  {
    name: "Robson Siqueira",
    location: "Fullano Praia - Jo√£o Pessoa",
    rating: 5,
    text: {
      pt: "√ìtimo lugar para curtir o final de semana, √≥timas bandas, excelente atendimento.",
      en: "Great place to enjoy the weekend, great bands, excellent service.",
      es: "Excelente lugar para disfrutar el fin de semana, excelentes bandas, excelente servicio.",
    },
    avatar: "img/avaliacao6.png",
  },
  {
    name: "Talyta Peixoto",
    location: "Golfinho Bar - Jo√£o Pessoa",
    rating: 5,
    text: {
      pt: "Experi√™ncia √≥tima, atendimento do gar√ßom Ed foi √≥timo, super simp√°tico. Amo esse restaurante aqui em Jampa",
      en: "Great experience, waiter Ed's service was great, super friendly. I love this restaurant here in Jampa",
      es: "Excelente experiencia, el servicio del camarero Ed fue excelente, s√∫per simp√°tico. Amo este restaurante aqu√≠ en Jampa",
    },
    avatar: "img/avaliacao7.png",
  },
  {
    name: "Fabbio BarbosaX",
    location: "Lovina Seixas - Jo√£o Pessoa",
    rating: 5,
    text: {
      pt: "Lugar gostoso de ficar. Acesso ao mar, comida boa, cerveja gelada.",
      en: "Nice place to stay. Access to the sea, good food, cold beer.",
      es: "Lugar agradable para quedarse. Acceso al mar, buena comida, cerveza fr√≠a.",
    },
    avatar: "img/avaliacao8.png",
  },
  {
    name: "Helena Barbosa",
    location: "Lovina Ponta de Campina - Cabedelo",
    rating: 5,
    text: {
      pt: "Comida √≥tima, chega muito r√°pido rapido, lugar lindo, musica ao vivo, e √≥timo atendimento.",
      en: "Great food, arrives very quickly, beautiful place, live music, and great service.",
      es: "Comida excelente, llega muy r√°pido, lugar hermoso, m√∫sica en vivo, y excelente servicio.",
    },
    avatar: "img/avaliacao9.png",
  },
]

// FAQ data with translations
const faqData = [
  {
    question: {
      pt: "Como fa√ßo uma reserva?",
      en: "How do I make a reservation?",
      es: "¬øC√≥mo hago una reserva?",
    },
    answer: {
      pt: "Voc√™ pode fazer sua reserva atrav√©s do nosso site clicando em 'Reservar j√°' ou entrando em contato diretamente pelo WhatsApp. Nossa equipe estar√° pronta para ajud√°-lo a garantir sua mesa.",
      en: "You can make your reservation through our website by clicking 'Book Now' or by contacting us directly via WhatsApp. Our team will be ready to help you secure your table.",
      es: "Puedes hacer tu reserva a trav√©s de nuestro sitio web haciendo clic en 'Reservar Ya' o contact√°ndonos directamente por WhatsApp. Nuestro equipo estar√° listo para ayudarte a asegurar tu mesa.",
    },
  },
  {
    question: {
      pt: "Qual o hor√°rio de funcionamento?",
      en: "What are the opening hours?",
      es: "¬øCu√°l es el horario de funcionamiento?",
    },
    answer: {
      pt: "Fullano Praia - Segunda √† Sexta - 09:00 a 18:00 - S√°bado e Domingo - 09:00 √† 19:00 | Golfinho Bar - Segunda √† Domingo - 09:00 √† 18:00 | Lovina Ponta de Campina - Segunda √† Domingo - 09:00 √† 18:00 | Lovina Seixas - Segunda √† Domingo - 09:00 √† 18:00",
      en: "Fullano Praia - Monday to Friday - 09:00 a 18:00 - Saturday and Sunday - 09:00 √† 19:00 | Golfinho Bar - Monday to Sunday - 09:00 √† 18:00 | Lovina Ponta de Campina - Monday to Sunday - 09:00 √† 18:00 | Lovina Seixas - Monday to Sunday - 09:00 √† 18:00",
      es: "Fullano Praia - De lunes a viernes - 09:00 a 18:00 - S√°bado y domingo - 09:00 √† 19:00 | Golfinho Bar - De lunes a domingo - 09:00 √† 18:00 | Lovina Ponta de Campina - De lunes a domingo - 09:00 √† 18:00 | Lovina Seixas - De lunes a domingo - 09:00 √† 18:00",
    },
  },
  {
    question: {
      pt: "Voc√™s aceitam grupos grandes?",
      en: "Do you accept large groups?",
      es: "¬øAceptan grupos grandes?",
    },
    answer: {
      pt: "Sim! Atendemos grupos de todos os tamanhos. Para grupos acima de 10 pessoas, recomendamos fazer a reserva com anteced√™ncia para garantirmos o melhor atendimento e espa√ßo adequado.",
      en: "Yes! We serve groups of all sizes. For groups over 10 people, we recommend making a reservation in advance to ensure the best service and adequate space.",
      es: "¬°S√≠! Atendemos grupos de todos los tama√±os. Para grupos de m√°s de 10 personas, recomendamos hacer la reserva con anticipaci√≥n para garantizar el mejor servicio y espacio adecuado.",
    },
  },
  {
    question: {
      pt: "H√° op√ß√µes vegetarianas/veganas?",
      en: "Are there vegetarian/vegan options?",
      es: "¬øHay opciones vegetarianas/veganas?",
    },
    answer: {
      pt: "Absolutamente! Todos os nossos restaurantes oferecem op√ß√µes vegetarianas e veganas deliciosas. Nossa equipe pode orient√°-lo sobre as melhores escolhas do card√°pio.",
      en: "All our restaurants offer delicious vegetarian and vegan options. Our team can guide you on the best menu choices.",
      es: "¬°Absolutamente! Todos nuestros restaurantes ofrecen opciones vegetarianas y veganas deliciosas. Nuestro equipo puede orientarte sobre las mejores opciones del men√∫.",
    },
  },
  {
    question: {
      pt: "Posso cancelar ou alterar minha reserva?",
      en: "Can I cancel or change my reservation?",
      es: "¬øPuedo cancelar o cambiar mi reserva?",
    },
    answer: {
      pt: "Sim, voc√™ pode cancelar ou alterar sua reserva entrando em contato conosco pelo WhatsApp ou telefone com pelo menos 2 horas de anteced√™ncia.",
      en: "Yes, you can cancel or change your reservation by contacting us via WhatsApp or phone at least 2 hours in advance.",
      es: "S√≠, puedes cancelar o cambiar tu reserva contact√°ndonos por WhatsApp o tel√©fono con al menos 2 horas de anticipaci√≥n.",
    },
  },
  {
    question: {
      pt: "Voc√™s t√™m estacionamento?",
      en: "Do you have parking?",
      es: "¬øTienen estacionamiento?",
    },
    answer: {
      pt: "A maioria dos nossos restaurantes possui estacionamento pr√≥prio ou conveniado. Consulte nossa equipe sobre a disponibilidade no local escolhido.",
      en: "Most of our restaurants have their own or partner parking. Check with our team about availability at your chosen location.",
      es: "La mayor√≠a de nuestros restaurantes tienen estacionamiento propio o convenido. Consulta con nuestro equipo sobre la disponibilidad en el lugar elegido.",
    },
  },
  {
    question: {
      pt: "Aceitam cart√£o de cr√©dito/d√©bito?",
      en: "Do you accept credit/debit cards?",
      es: "¬øAceptan tarjetas de cr√©dito/d√©bito?",
    },
    answer: {
      pt: "Sim! Aceitamos as principais bandeiras de cart√£o de cr√©dito e d√©bito, al√©m de PIX e dinheiro. Alguns locais tamb√©m aceitam vale-refei√ß√£o.",
      en: "Yes! We accept major credit and debit card brands, as well as PIX and cash. Some locations also accept meal vouchers.",
      es: "¬°S√≠! Aceptamos las principales marcas de tarjetas de cr√©dito y d√©bito, adem√°s de PIX y efectivo. Algunos lugares tambi√©n aceptan vales de comida.",
    },
  },
  {
    question: {
      pt: "H√° m√∫sica ao vivo?",
      en: "Is there live music?",
      es: "¬øHay m√∫sica en vivo?",
    },
    answer: {
      pt: "V√°rios dos nossos restaurantes oferecem m√∫sica ao vivo em dias espec√≠ficos da semana. Consulte nossa programa√ß√£o ou entre em contato para saber sobre os eventos musicais.",
      en: "Several of our restaurants offer live music on specific days of the week. Check our schedule or contact us to learn about musical events.",
      es: "Varios de nuestros restaurantes ofrecen m√∫sica en vivo en d√≠as espec√≠ficos de la semana. Consulta nuestra programaci√≥n o cont√°ctanos para saber sobre los eventos musicales.",
    },
  },
]

// AI Quick Questions with translations
const aiQuickQuestions = [
  {
    question: {
      pt: "Ver card√°pio",
      en: "View menu",
      es: "Ver men√∫",
    },
    answer: {
      pt: "Escolha o restaurante para ver o card√°pio:",
      en: "Choose the restaurant to view the menu:",
      es: "Elige el restaurante para ver el men√∫:",
    },
    action: "showCardapioOptions",
  },
  {
    question: {
      pt: "Hor√°rio de funcionamento",
      en: "Opening hours",
      es: "Horario de funcionamiento",
    },
    answer: {
      pt: "Fullano Praia - Segunda √† Sexta - 09:00 a 18:00 - S√°bado e Domingo - 09:00 √† 19:00 | Golfinho Bar - Segunda √† Domingo - 09:00 √† 18:00 | Lovina Ponta de Campina - Segunda √† Domingo - 09:00 √† 18:00 | Lovina Seixas - Segunda √† Domingo - 09:00 √† 18:00",
      en: "Fullano Praia - Monday to Friday - 09:00 a 18:00 - Saturday and Sunday - 09:00 √† 19:00 | Golfinho Bar - Monday to Sunday - 09:00 √† 18:00 | Lovina Ponta de Campina - Monday to Sunday - 09:00 √† 18:00 | Lovina Seixas - Monday to Sunday - 09:00 √† 18:00",
      es: "Fullano Praia - De lunes a viernes - 09:00 a 18:00 - S√°bado y domingo - 09:00 √† 19:00 | Golfinho Bar - De lunes a domingo - 09:00 √† 18:00 | Lovina Ponta de Campina - De lunes a domingo - 09:00 √† 18:00 | Lovina Seixas - De lunes a domingo - 09:00 √† 18:00",
    },
  },
  {
    question: {
      pt: "Como fazer reserva",
      en: "How to make a reservation",
      es: "C√≥mo hacer una reserva",
    },
    answer: {
      pt: "Voc√™ pode fazer sua reserva clicando no bot√£o 'Reservar j√°' no nosso site ou entrando em contato pelo WhatsApp. √â r√°pido e f√°cil!",
      en: "You can make your reservation by clicking the 'Book Now' button on our website or contacting us via WhatsApp. It's quick and easy!",
      es: "Puedes hacer tu reserva haciendo clic en el bot√≥n 'Reservar Ya' en nuestro sitio web o contact√°ndonos por WhatsApp. ¬°Es r√°pido y f√°cil!",
    },
  },
  {
    question: {
      pt: "Localiza√ß√£o dos restaurantes",
      en: "Restaurant locations",
      es: "Ubicaci√≥n de los restaurantes",
    },
    answer: {
      pt: "Temos 5 restaurantes incr√≠veis: Fullano Praia (Bessa), Lovina Seixas, Golfinho Bar, Lovina Ponta de Campina (Cabedelo) e Rancho da Ema (Cabaceiras). Todos com vista privilegiada!",
      en: "We have 5 amazing restaurants: Fullano Praia (Bessa), Lovina Seixas, Golfinho Bar, Lovina Ponta de Campina (Cabedelo) and Rancho da Ema (Cabaceiras). All with privileged views!",
      es: "Tenemos 5 restaurantes incre√≠bles: Fullano Praia (Bessa), Lovina Seixas, Golfinho Bar, Lovina Ponta de Campina (Cabedelo) y Rancho da Ema (Cabaceiras). ¬°Todos con vistas privilegiadas!",
    },
  },
  {
    question: {
      pt: "Pre√ßos e formas de pagamento",
      en: "Prices and payment methods",
      es: "Precios y formas de pago",
    },
    answer: {
      pt: "Nossos pre√ßos s√£o justos e competitivos. Aceitamos cart√£o de cr√©dito/d√©bito, PIX, dinheiro e vale-refei√ß√£o. Entre em contato para mais detalhes sobre valores.",
      en: "Our prices are fair and competitive. We accept credit/debit cards, PIX, cash and meal vouchers. Contact us for more details about prices.",
      es: "Nuestros precios son justos y competitivos. Aceptamos tarjetas de cr√©dito/d√©bito, PIX, efectivo y vales de comida. Cont√°ctanos para m√°s detalles sobre precios.",
    },
  },
]

// Internationalization System
const translations = {
  pt: {
    // Navigation
    aboutUs: "Sobre n√≥s",
    restaurants: "Restaurantes",
    location: "Localiza√ß√£o",
    faq: "FAQ",
    reserveButton: "Reservar j√°",

    // Hero Section
    heroTitle: "Descubra o <span class='highlight'>Sabor</span>, Viva a Experi√™ncia!",
    heroSubtitle:
      "Conhe√ßa os melhores restaurantes e experi√™ncias <span class='highlight'>gastron√¥micas mais incr√≠veis da Para√≠ba.</span> Uma jornada culin√°ria inesquec√≠vel te espera!",
    heroButton: "Conhe√ßa o Grupo Fullano",
    heroRating: "Avaliado por mais de <span class='highlight'>+25.284 clientes</span>",

    // Sections
    experienceTitle: "VIVENCIE O MELHOR DA PARA√çBA",
    experienceSubtitle: "Descubra suas melhores experi√™ncias",
    aboutTitle: "SOBRE N√ìS",
    aboutSubtitle: "Conhe√ßa um pouco sobre n√≥s!",
    testimonialsTitle: "NOSSAS AVALIA√á√ïES",
    testimonialsSubtitle: "Reconhecido por +25.284 no Google",
    galleryTitle: "AMBIENTE",
    gallerySubtitle: "Conhe√ßa os nossos ambientes!",
    faqTitle: "PERGUNTAS FREQUENTES",
    faqSubtitle: "Tire suas d√∫vidas sobre nossos restaurantes",

    // Features
    authenticFlavor: "Sabor Aut√™ntico",
    authenticFlavorDesc: "Pratos tradicionais preparados com ingredientes frescos e receitas familiares.",
    respectNature: "Respeito ao Mar e √† Terra",
    respectNatureDesc: "Sustentabilidade e respeito ao meio ambiente em todas as nossas opera√ß√µes.",
    hospitality: "Hospitalidade Paraibana",
    hospitalityDesc: "Atendimento caloroso e acolhedor que faz voc√™ se sentir em casa.",
    memorableExperiences: "Experi√™ncias Memor√°veis",
    memorableExperiencesDesc: "Momentos √∫nicos que ficam na mem√≥ria e no cora√ß√£o de nossos visitantes.",

    // Buttons
    seeMore: "Ver mais",
    goButton: "IR",
    reserveHere: "RESERVE AQUI",

    // Footer
    footerTitle: "GRUPO FULLANO",
    footerDescription:
      "Nosso Grupo Fullano tem a miss√£o de oferecer a todos os clientes a melhor experi√™ncia gastron√¥mica da Para√≠ba. Nossos restaurantes s√£o locais de encontro, de celebra√ß√£o e de descoberta de novos sabores. Venha viver experi√™ncias inesquec√≠veis e provar pratos √∫nicos de nossa culin√°ria!",
    addressTitle: "ENDERE√áO",
    contactTitle: "CONTATO",

    // Translation Modal
    translationTitle: "Traduzir p√°gina?",
    translationMessage: "Detectamos que voc√™ pode preferir ver este site em outro idioma. Gostaria de traduzir?",
    noThanks: "N√£o, obrigado",

    // Google Approval
    googleApproval: "Aprovado por milhares de avalia√ß√µes no Google",

    // AI Assistant
    aiTitle: "Assistente Virtual",
    aiSubtitle: "Como posso ajudar voc√™?",
    aiWelcome: "Ol√°! Sou o assistente virtual do Grupo Fullano. Escolha uma das op√ß√µes abaixo ou digite sua pergunta:",
    aiInputPlaceholder: "Digite sua pergunta...",
  },

  en: {
    // Navigation
    aboutUs: "About Us",
    restaurants: "Restaurants",
    location: "Location",
    faq: "FAQ",
    reserveButton: "Book Now",

    // Hero Section
    heroTitle: "Discover the <span class='highlight'>Flavor</span>, Live the Experience!",
    heroSubtitle:
      "Discover the best restaurants and <span class='highlight'>most incredible gastronomic experiences in Para√≠ba.</span> An unforgettable culinary journey awaits you!",
    heroButton: "Meet Grupo Fullano",
    heroRating: "Rated by more than <span class='highlight'>+25,284 customers</span>",

    // Sections
    experienceTitle: "EXPERIENCE THE BEST OF PARA√çBA",
    experienceSubtitle: "Discover your best experiences",
    aboutTitle: "ABOUT US",
    aboutSubtitle: "Learn a little about us!",
    testimonialsTitle: "OUR REVIEWS",
    testimonialsSubtitle: "Recognized by +25,284 on Google",
    galleryTitle: "ENVIRONMENT",
    gallerySubtitle: "Get to know our environments!",
    faqTitle: "FREQUENTLY ASKED QUESTIONS",
    faqSubtitle: "Get answers about our restaurants",

    // Features
    authenticFlavor: "Authentic Flavor",
    authenticFlavorDesc: "Traditional dishes prepared with fresh ingredients and family recipes.",
    respectNature: "Respect for Sea and Land",
    respectNatureDesc: "Sustainability and respect for the environment in all our operations.",
    hospitality: "Paraiban Hospitality",
    hospitalityDesc: "Warm and welcoming service that makes you feel at home.",
    memorableExperiences: "Memorable Experiences",
    memorableExperiencesDesc: "Unique moments that stay in the memory and heart of our visitors.",

    // Buttons
    seeMore: "See More",
    goButton: "GO",
    reserveHere: "BOOK HERE",

    // Footer
    footerTitle: "GRUPO FULLANO",
    footerDescription:
      "Our Grupo Fullano has the mission to offer all customers the best gastronomic experience in Para√≠ba. Our restaurants are places of meeting, celebration and discovery of new flavors. Come live unforgettable experiences and taste unique dishes of our cuisine!",
    addressTitle: "ADDRESS",
    contactTitle: "CONTACT",

    // Translation Modal
    translationTitle: "Translate page?",
    translationMessage:
      "We detected that you might prefer to see this site in another language. Would you like to translate?",
    noThanks: "No, thanks",

    // Google Approval
    googleApproval: "Approved by thousands of Google reviews",

    // AI Assistant
    aiTitle: "Virtual Assistant",
    aiSubtitle: "How can I help you?",
    aiWelcome: "Hello! I'm Grupo Fullano's virtual assistant. Choose one of the options below or type your question:",
    aiInputPlaceholder: "Type your question...",
  },

  es: {
    // Navigation
    aboutUs: "Sobre Nosotros",
    restaurants: "Restaurantes",
    location: "Ubicaci√≥n",
    faq: "FAQ",
    reserveButton: "Reservar Ya",

    // Hero Section
    heroTitle: "Descubre el <span class='highlight'>Sabor</span>, ¬°Vive la Experiencia!",
    heroSubtitle:
      "Conoce los mejores restaurantes y <span class='highlight'>experiencias gastron√≥micas m√°s incre√≠bles de Para√≠ba.</span> ¬°Te espera un viaje culinario inolvidable!",
    heroButton: "Conoce Grupo Fullano",
    heroRating: "Valorado por m√°s de <span class='highlight'>+25.284 clientes</span>",

    // Sections
    experienceTitle: "VIVE LO MEJOR DE PARA√çBA",
    experienceSubtitle: "Descubre tus mejores experiencias",
    aboutTitle: "SOBRE NOSOTROS",
    aboutSubtitle: "¬°Conoce un poco sobre nosotros!",
    testimonialsTitle: "NUESTRAS RESE√ëAS",
    testimonialsSubtitle: "Reconocido por +25.284 en Google",
    galleryTitle: "AMBIENTE",
    gallerySubtitle: "¬°Conoce nuestros ambientes!",
    faqTitle: "PREGUNTAS FRECUENTES",
    faqSubtitle: "Resuelve tus dudas sobre nuestros restaurantes",

    // Features
    authenticFlavor: "Sabor Aut√©ntico",
    authenticFlavorDesc: "Platos tradicionales preparados con ingredientes frescos y recetas familiares.",
    respectNature: "Respeto al Mar y la Tierra",
    respectNatureDesc: "Sostenibilidad y respeto al medio ambiente en todas nuestras operaciones.",
    hospitality: "Hospitalidad Paraibana",
    hospitalityDesc: "Atenci√≥n c√°lida y acogedora que te hace sentir como en casa.",
    memorableExperiences: "Experiencias Memorables",
    memorableExperiencesDesc: "Momentos √∫nicos que quedan en la memoria y el coraz√≥n de nuestros visitantes.",

    // Buttons
    seeMore: "Ver M√°s",
    goButton: "IR",
    reserveHere: "RESERVA AQU√ç",

    // Footer
    footerTitle: "GRUPO FULLANO",
    footerDescription:
      "Nuestro Grupo Fullano tiene la misi√≥n de ofrecer a todos los clientes la mejor experiencia gastron√≥mica de Para√≠ba. Nuestros restaurantes son lugares de encuentro, celebraci√≥n y descubrimiento de nuevos sabores. ¬°Ven a vivir experiencias inolvidables y probar platos √∫nicos de nuestra cocina!",
    addressTitle: "DIRECCI√ìN",
    contactTitle: "CONTACTO",

    // Translation Modal
    translationTitle: "¬øTraducir p√°gina?",
    translationMessage: "Detectamos que podr√≠as preferir ver este sitio en otro idioma. ¬øTe gustar√≠a traducir?",
    noThanks: "No, gracias",

    // Google Approval
    googleApproval: "Aprobado por miles de rese√±as de Google",

    // AI Assistant
    aiTitle: "Asistente Virtual",
    aiSubtitle: "¬øC√≥mo puedo ayudarte?",
    aiWelcome:
      "¬°Hola! Soy el asistente virtual de Grupo Fullano. Elige una de las opciones abajo o escribe tu pregunta:",
    aiInputPlaceholder: "Escribe tu pregunta...",
  },
}

// Language detection and management
let currentLanguage = localStorage.getItem("preferredLanguage") || "pt"
let userCountry = null
let userLanguage = null

// Detect user language and country
function detectUserLanguage() {
  userLanguage = navigator.language || navigator.userLanguage
  const langCode = userLanguage.split("-")[0].toLowerCase()

  if (userLanguage.includes("-")) {
    userCountry = userLanguage.split("-")[1].toUpperCase()
  }

  return langCode
}

// Check if user is from Brazil
function isUserFromBrazil() {
  return userCountry === "BR" || userLanguage.toLowerCase().includes("pt-br")
}

// Show translation suggestion modal
function showTranslationSuggestion(suggestedLang) {
  const modal = document.getElementById("translationModal")
  const suggestedLanguagesContainer = document.getElementById("suggestedLanguages")

  suggestedLanguagesContainer.innerHTML = ""

  const langInfo = {
    en: { flag: "us", name: "English" },
    es: { flag: "es", name: "Espa√±ol" },
  }

  if (langInfo[suggestedLang]) {
    const langElement = document.createElement("div")
    langElement.className = "suggested-language"
    langElement.innerHTML = `
      <img src="https://flagcdn.com/w20/${langInfo[suggestedLang].flag}.png" alt="${langInfo[suggestedLang].name}" class="flag-icon">
      <span>${langInfo[suggestedLang].name}</span>
    `
    langElement.addEventListener("click", () => {
      changeLanguage(suggestedLang)
      hideTranslationModal()
    })
    suggestedLanguagesContainer.appendChild(langElement)
  }

  modal.classList.add("active")
}

// Hide translation modal
function hideTranslationModal() {
  const modal = document.getElementById("translationModal")
  modal.classList.remove("active")
  localStorage.setItem("translationSuggestionDismissed", "true")
}

// Change language
function changeLanguage(lang) {
  currentLanguage = lang
  localStorage.setItem("preferredLanguage", lang)

  const currentFlag = document.getElementById("currentFlag")
  const flagMap = {
    pt: "br",
    en: "us",
    es: "es",
  }
  currentFlag.src = `https://flagcdn.com/w20/${flagMap[lang]}.png`

  translatePage()
  populateLocations()
  populateTestimonials()
  populateGallery()
  populateFAQ()
  populateAIQuestions()
}

// Translate page elements
function translatePage() {
  const elementsToTranslate = document.querySelectorAll("[data-translate]")

  elementsToTranslate.forEach((element) => {
    const key = element.getAttribute("data-translate")
    if (translations[currentLanguage] && translations[currentLanguage][key]) {
      element.innerHTML = translations[currentLanguage][key]
    }
  })

  // Update placeholder
  const aiInput = document.getElementById("aiInput")
  if (aiInput && translations[currentLanguage].aiInputPlaceholder) {
    aiInput.placeholder = translations[currentLanguage].aiInputPlaceholder
  }
}

// Initialize language system
function initializeLanguageSystem() {
  const detectedLang = detectUserLanguage()

  if (!localStorage.getItem("translationSuggestionDismissed") && !isUserFromBrazil()) {
    if (detectedLang === "en" && currentLanguage === "pt") {
      setTimeout(() => changeLanguage("en"), 1000)
    } else if (detectedLang === "es" && currentLanguage === "pt") {
      setTimeout(() => changeLanguage("es"), 1000)
    } else if (detectedLang !== "pt" && currentLanguage === "pt") {
      if (translations[detectedLang]) {
        setTimeout(() => showTranslationSuggestion(detectedLang), 2000)
      } else {
        setTimeout(() => showTranslationSuggestion("en"), 2000)
      }
    }
  }

  changeLanguage(currentLanguage)
}

// Language selector event listeners
function setupLanguageSelector() {
  const languageToggle = document.getElementById("languageToggle")
  const languageDropdown = document.getElementById("languageDropdown")
  const languageOptions = document.querySelectorAll(".language-option")
  const closeModal = document.getElementById("closeModal")
  const dismissTranslation = document.getElementById("dismissTranslation")

  languageToggle.addEventListener("click", (e) => {
    e.stopPropagation()
    languageDropdown.classList.toggle("active")
  })

  document.addEventListener("click", () => {
    languageDropdown.classList.remove("active")
  })

  languageOptions.forEach((option) => {
    option.addEventListener("click", (e) => {
      e.stopPropagation()
      const lang = option.getAttribute("data-lang")
      changeLanguage(lang)
      languageDropdown.classList.remove("active")
    })
  })

  closeModal.addEventListener("click", hideTranslationModal)
  dismissTranslation.addEventListener("click", hideTranslationModal)

  document.getElementById("translationModal").addEventListener("click", (e) => {
    if (e.target.id === "translationModal") {
      hideTranslationModal()
    }
  })
}

// Testimonials Carousel Configuration
let currentTestimonialPage = 0
const testimonialsPerPage = 3
const totalTestimonialPages = Math.ceil(testimonials.length / testimonialsPerPage)

// Gallery Carousel Configuration - ALTERADO: 4 imagens por p√°gina
let currentGalleryPage = 0
const galleryItemsPerPage = 4 // MUDAN√áA: de 3 para 4
const totalGalleryPages = Math.ceil(galleryItems.length / galleryItemsPerPage)

// SISTEMA DE AUTO-ADVANCE CORRIGIDO - Evita m√∫ltiplos intervalos
let testimonialAutoAdvance = null
let galleryAutoAdvance = null
let isAutoAdvanceActive = true
let pauseTimeout = null

// Generate stars HTML
function generateStars(rating) {
  let starsHTML = ""
  for (let i = 0; i < 5; i++) {
    starsHTML += '<i class="fas fa-star"></i>'
  }
  return starsHTML
}

// Populate locations
function populateLocations() {
  const locationsGrid = document.getElementById("locationsGrid")
  locationsGrid.innerHTML = ""

  locations.forEach((location) => {
    const locationCard = document.createElement("div")
    locationCard.className = "location-card"

    const description = location.description[currentLanguage] || location.description.pt

    locationCard.innerHTML = `
      <img src="${location.image}" alt="${location.name}">
      <div class="card-content">
        <h3>${location.name}</h3>
        <p>${description}</p>
        <div class="card-footer">
          <div class="card-rating">
            <div class="stars">${generateStars(location.rating)}</div>
            <span class="rating-text">${location.rating}</span>
            <span class="reviews">(${location.reviews})</span>
          </div>
          <div class="card-buttons">
            <a href="${location.link}" target="_blank" class="btn-link">
              <button class="btn-outline" data-translate="seeMore">${translations[currentLanguage].seeMore}</button>
            </a>
            <a href="${location.irLink}" target="_blank" class="btn-link">
              <button class="btn-small" data-translate="goButton">${translations[currentLanguage].goButton}</button>
            </a>
          </div>
        </div>
      </div>
    `
    locationsGrid.appendChild(locationCard)
  })
}

// Populate testimonials for current page
function populateTestimonials() {
  const testimonialsGrid = document.getElementById("testimonialsGrid")
  testimonialsGrid.innerHTML = ""

  const startIndex = currentTestimonialPage * testimonialsPerPage
  const endIndex = Math.min(startIndex + testimonialsPerPage, testimonials.length)
  const currentTestimonials = testimonials.slice(startIndex, endIndex)

  currentTestimonials.forEach((testimonial) => {
    const testimonialCard = document.createElement("div")
    testimonialCard.className = "testimonial-card"

    const text = testimonial.text[currentLanguage] || testimonial.text.pt

    testimonialCard.innerHTML = `
      <div class="testimonial-header">
        <img src="${testimonial.avatar}" alt="${testimonial.name}" class="testimonial-avatar">
        <div class="testimonial-info">
          <h4>${testimonial.name}</h4>
          <div class="stars">${generateStars(testimonial.rating)}</div>
        </div>
      </div>
      <p class="testimonial-text">${text}</p>
      <div class="testimonial-location">
        <i class="fas fa-map-marker-alt"></i>
        ${testimonial.location}
      </div>
    `

    testimonialsGrid.appendChild(testimonialCard)
  })

  updateTestimonialIndicators()
}

// Populate gallery for current page
function populateGallery() {
  const galleryGrid = document.getElementById("galleryGrid")
  galleryGrid.innerHTML = ""

  const startIndex = currentGalleryPage * galleryItemsPerPage
  const endIndex = Math.min(startIndex + galleryItemsPerPage, galleryItems.length)
  const currentGalleryItems = galleryItems.slice(startIndex, endIndex)

  currentGalleryItems.forEach((item) => {
    const galleryItem = document.createElement("div")
    galleryItem.className = "gallery-item"

    galleryItem.innerHTML = `
      <img src="${item.image}" alt="${item.alt}">
      <div class="gallery-overlay">
        <div class="gallery-rating">
          <div class="stars">
            <i class="fas fa-star"></i>
            <i class="fas fa-star"></i>
            <i class="fas fa-star"></i>
            <i class="fas fa-star"></i>
            <i class="fas fa-star"></i>
          </div>
        </div>
        <div class="gallery-stats">
          <span>‚ù§Ô∏è ${item.likes}</span>
          <span>üí¨ ${item.comments}</span>
          <span>üì§ ${item.shares}</span>
        </div>
      </div>
    `

    galleryGrid.appendChild(galleryItem)
  })

  updateGalleryIndicators()
}

// Populate FAQ
function populateFAQ() {
  const faqContainer = document.getElementById("faqContainer")
  faqContainer.innerHTML = ""

  faqData.forEach((faq, index) => {
    const faqItem = document.createElement("div")
    faqItem.className = "faq-item"

    const question = faq.question[currentLanguage] || faq.question.pt

    // Add line breaks after each | symbol in the business hours answer
    let answer = faq.answer[currentLanguage] || faq.answer.pt

    // Check if this is the business hours FAQ (index 1)
    if (index === 1) {
      answer = answer.replace(/\s*\|\s*/g, "<br>")
    }

    faqItem.innerHTML = `
      <button class="faq-question" data-faq="${index}">
        ${question}
        <i class="fas fa-chevron-down"></i>
      </button>
      <div class="faq-answer" id="faq-answer-${index}">
        ${answer}
      </div>
    `

    faqContainer.appendChild(faqItem)
  })

  // Add event listeners for FAQ items
  document.querySelectorAll(".faq-question").forEach((question) => {
    question.addEventListener("click", () => {
      const faqIndex = question.getAttribute("data-faq")
      const answer = document.getElementById(`faq-answer-${faqIndex}`)
      const isActive = question.classList.contains("active")

      // Close all FAQ items
      document.querySelectorAll(".faq-question").forEach((q) => q.classList.remove("active"))
      document.querySelectorAll(".faq-answer").forEach((a) => a.classList.remove("active"))

      // Open clicked item if it wasn't active
      if (!isActive) {
        question.classList.add("active")
        answer.classList.add("active")
      }
    })
  })
}

// Populate AI Quick Questions
function populateAIQuestions() {
  const quickQuestionsContainer = document.getElementById("aiQuickQuestions")
  quickQuestionsContainer.innerHTML = ""

  aiQuickQuestions.forEach((item) => {
    const questionBtn = document.createElement("button")
    questionBtn.className = "quick-question"

    const questionText = item.question[currentLanguage] || item.question.pt
    questionBtn.textContent = questionText

    questionBtn.addEventListener("click", () => {
      addAIMessage(questionText, true)
      if (item.action === "showCardapioOptions") {
        showCardapioOptions()
      } else {
        const answerText = item.answer[currentLanguage] || item.answer.pt
        addAIMessage(answerText, false)
      }
    })
    quickQuestionsContainer.appendChild(questionBtn)
  })
}

// Create carousel indicators for testimonials
function createTestimonialIndicators() {
  const indicatorsContainer = document.getElementById("carouselIndicators")
  indicatorsContainer.innerHTML = ""

  for (let i = 0; i < totalTestimonialPages; i++) {
    const indicator = document.createElement("div")
    indicator.className = `indicator ${i === currentTestimonialPage ? "active" : ""}`
    indicator.addEventListener("click", () => goToTestimonialPage(i))
    indicatorsContainer.appendChild(indicator)
  }
}

// Create carousel indicators for gallery
function createGalleryIndicators() {
  const indicatorsContainer = document.getElementById("galleryIndicators")
  indicatorsContainer.innerHTML = ""

  for (let i = 0; i < totalGalleryPages; i++) {
    const indicator = document.createElement("div")
    indicator.className = `indicator ${i === currentGalleryPage ? "active" : ""}`
    indicator.addEventListener("click", () => goToGalleryPage(i))
    indicatorsContainer.appendChild(indicator)
  }
}

// Update testimonial indicators
function updateTestimonialIndicators() {
  const indicators = document.querySelectorAll("#carouselIndicators .indicator")
  indicators.forEach((indicator, index) => {
    indicator.classList.toggle("active", index === currentTestimonialPage)
  })
}

// Update gallery indicators
function updateGalleryIndicators() {
  const indicators = document.querySelectorAll("#galleryIndicators .indicator")
  indicators.forEach((indicator, index) => {
    indicator.classList.toggle("active", index === currentGalleryPage)
  })
}

// Navigation functions
function goToTestimonialPage(pageIndex) {
  currentTestimonialPage = pageIndex
  populateTestimonials()
}

function goToGalleryPage(pageIndex) {
  currentGalleryPage = pageIndex
  populateGallery()
}

function nextTestimonials() {
  currentTestimonialPage = (currentTestimonialPage + 1) % totalTestimonialPages
  populateTestimonials()
}

function prevTestimonials() {
  currentTestimonialPage = (currentTestimonialPage - 1 + totalTestimonialPages) % totalTestimonialPages
  populateTestimonials()
}

function nextGallery() {
  currentGalleryPage = (currentGalleryPage + 1) % totalGalleryPages
  populateGallery()
}

function prevGallery() {
  currentGalleryPage = (currentGalleryPage - 1 + totalGalleryPages) % totalGalleryPages
  populateGallery()
}

// FUNCIONALIDADE DE SWIPE PARA CARROSS√âIS
function initializeSwipeCarousels() {
  const carousels = [
    {
      container: document.getElementById("testimonialsGrid"),
      type: "testimonials",
    },
    {
      container: document.getElementById("galleryGrid"),
      type: "gallery",
    },
  ]

  carousels.forEach((carousel) => {
    if (!carousel.container) return

    let startX = 0
    let startY = 0
    let currentX = 0
    let currentY = 0
    let isDragging = false
    let hasMoved = false

    // Mouse events
    carousel.container.addEventListener("mousedown", (e) => {
      isDragging = true
      hasMoved = false
      startX = e.clientX
      startY = e.clientY
      carousel.container.style.cursor = "grabbing"
      e.preventDefault()
    })

    carousel.container.addEventListener("mousemove", (e) => {
      if (!isDragging) return

      currentX = e.clientX
      currentY = e.clientY

      const deltaX = currentX - startX
      const deltaY = currentY - startY

      // Se o movimento horizontal for maior que o vertical, √© um swipe horizontal
      if (Math.abs(deltaX) > Math.abs(deltaY) && Math.abs(deltaX) > 10) {
        hasMoved = true
        e.preventDefault()
      }
    })

    carousel.container.addEventListener("mouseup", (e) => {
      if (isDragging && hasMoved) {
        const deltaX = currentX - startX

        // Threshold para considerar um swipe
        if (Math.abs(deltaX) > 50) {
          if (deltaX > 0) {
            // Swipe para direita - voltar
            if (carousel.type === "testimonials") {
              prevTestimonials()
            } else if (carousel.type === "gallery") {
              prevGallery()
            }
          } else {
            // Swipe para esquerda - avan√ßar
            if (carousel.type === "testimonials") {
              nextTestimonials()
            } else if (carousel.type === "gallery") {
              nextGallery()
            }
          }

          // Pausar auto-advance quando houver intera√ß√£o manual
          pauseAutoAdvance()
        }
      }

      isDragging = false
      hasMoved = false
      carousel.container.style.cursor = "grab"
    })

    carousel.container.addEventListener("mouseleave", () => {
      isDragging = false
      hasMoved = false
      carousel.container.style.cursor = "grab"
    })

    // Touch events para mobile
    carousel.container.addEventListener(
      "touchstart",
      (e) => {
        isDragging = true
        hasMoved = false
        startX = e.touches[0].clientX
        startY = e.touches[0].clientY
      },
      { passive: true },
    )

    carousel.container.addEventListener(
      "touchmove",
      (e) => {
        if (!isDragging) return

        currentX = e.touches[0].clientX
        currentY = e.clientY

        const deltaX = currentX - startX
        const deltaY = currentY - startY

        // Se o movimento horizontal for maior que o vertical, √© um swipe horizontal
        if (Math.abs(deltaX) > Math.abs(deltaY) && Math.abs(deltaX) > 10) {
          hasMoved = true
          // Prevenir scroll da p√°gina durante o swipe horizontal
          e.preventDefault()
        }
      },
      { passive: false },
    )

    carousel.container.addEventListener(
      "touchend",
      (e) => {
        if (isDragging && hasMoved) {
          const deltaX = currentX - startX

          // Threshold para considerar um swipe
          if (Math.abs(deltaX) > 50) {
            if (deltaX > 0) {
              // Swipe para direita - voltar
              if (carousel.type === "testimonials") {
                prevTestimonials()
              } else if (carousel.type === "gallery") {
                prevGallery()
              }
            } else if (carousel.type === "testimonials") {
              nextTestimonials()
            } else if (carousel.type === "gallery") {
              nextGallery()
            }

            // Pausar auto-advance quando houver intera√ß√£o manual
            pauseAutoAdvance()
          }
        }

        isDragging = false
        hasMoved = false
      },
      { passive: true },
    )

    // Prevenir cliques quando arrastando
    carousel.container.addEventListener("click", (e) => {
      if (hasMoved) {
        e.preventDefault()
        e.stopPropagation()
      }
    })

    // Adicionar cursor de grab
    carousel.container.style.cursor = "grab"
  })
}

// SISTEMA DE AUTO-ADVANCE CORRIGIDO - Evita m√∫ltiplos intervalos
function startAutoAdvance() {
  // IMPORTANTE: Sempre limpar intervalos existentes antes de criar novos
  stopAutoAdvance()

  if (!isAutoAdvanceActive) return

  console.log("üöÄ Iniciando auto-advance...") // Debug

  // Testimonials auto-advance a cada 8 segundos
  testimonialAutoAdvance = setInterval(() => {
    if (isAutoAdvanceActive) {
      console.log("üìù Auto-advance testimonials") // Debug
      nextTestimonials()
    }
  }, 8000)

  // Gallery auto-advance a cada 10 segundos
  galleryAutoAdvance = setInterval(() => {
    if (isAutoAdvanceActive) {
      console.log("üñºÔ∏è Auto-advance gallery") // Debug
      nextGallery()
    }
  }, 10000)
}

function stopAutoAdvance() {
  console.log("‚èπÔ∏è Parando auto-advance...") // Debug

  // Limpar todos os intervalos
  if (testimonialAutoAdvance) {
    clearInterval(testimonialAutoAdvance)
    testimonialAutoAdvance = null
  }

  if (galleryAutoAdvance) {
    clearInterval(galleryAutoAdvance)
    galleryAutoAdvance = null
  }

  // Limpar timeout de pausa se existir
  if (pauseTimeout) {
    clearTimeout(pauseTimeout)
    pauseTimeout = null
  }
}

function pauseAutoAdvance(duration = 15000) {
  console.log("‚è∏Ô∏è Pausando auto-advance por", duration, "ms") // Debug

  // Parar auto-advance
  isAutoAdvanceActive = false
  stopAutoAdvance()

  // Limpar timeout anterior se existir
  if (pauseTimeout) {
    clearTimeout(pauseTimeout)
  }

  // Reativar ap√≥s o tempo especificado
  pauseTimeout = setTimeout(() => {
    console.log("‚ñ∂Ô∏è Reativando auto-advance...") // Debug
    isAutoAdvanceActive = true
    startAutoAdvance()
  }, duration)
}

// Floating buttons functionality
function setupFloatingButtons() {
  const scrollBtn = document.getElementById("scrollBtn")
  const scrollIcon = document.getElementById("scrollIcon")
  const aiChatBtn = document.getElementById("aiChatBtn")
  const aiChatModal = document.getElementById("aiChatModal")
  const aiCloseBtn = document.getElementById("aiCloseBtn")
  const aiSendBtn = document.getElementById("aiSendBtn")
  const aiInput = document.getElementById("aiInput")

  let isAtTop = true

  // Scroll button functionality
  scrollBtn.addEventListener("click", () => {
    if (isAtTop) {
      // Scroll to bottom
      window.scrollTo({
        top: document.body.scrollHeight,
        behavior: "smooth",
      })
    } else {
      // Scroll to top
      window.scrollTo({
        top: 0,
        behavior: "smooth",
      })
    }
  })

  // Update scroll button icon based on position
  window.addEventListener("scroll", () => {
    const scrollPosition = window.scrollY
    const windowHeight = window.innerHeight

    if (scrollPosition < windowHeight / 2) {
      isAtTop = true
      scrollIcon.className = "fas fa-arrow-down"
    } else {
      isAtTop = false
      scrollIcon.className = "fas fa-arrow-up"
    }
  })

  // AI Chat functionality
  aiChatBtn.addEventListener("click", () => {
    aiChatModal.classList.add("active")
  })

  aiCloseBtn.addEventListener("click", () => {
    aiChatModal.classList.remove("active")
  })

  // Close AI chat when clicking outside
  aiChatModal.addEventListener("click", (e) => {
    if (e.target === aiChatModal) {
      aiChatModal.classList.remove("active")
    }
  })

  // AI input functionality
  aiSendBtn.addEventListener("click", handleAIInput)
  aiInput.addEventListener("keypress", (e) => {
    if (e.key === "Enter") {
      handleAIInput()
    }
  })
}

// Handle AI input
function handleAIInput() {
  const aiInput = document.getElementById("aiInput")
  const userMessage = aiInput.value.trim()

  if (userMessage) {
    addAIMessage(userMessage, true)
    aiInput.value = ""

    // Simple AI response logic
    setTimeout(() => {
      const response = getAIResponse(userMessage)
      addAIMessage(response, false)
    }, 1000)
  }
}

// Add message to AI chat
function addAIMessage(message, isUser) {
  const chatBody = document.getElementById("aiChatBody")
  const messageDiv = document.createElement("div")
  messageDiv.className = `ai-message ${isUser ? "user-message" : ""}`

  // Make links clickable
  const messageWithLinks = message.replace(
    /(https?:\/\/[^\s]+)/g,
    '<a href="$1" target="_blank" style="color: #2563eb; text-decoration: underline;">$1</a>',
  )

  if (isUser) {
    messageDiv.innerHTML = `
      <div class="ai-text">${messageWithLinks}</div>
    `
  } else {
    messageDiv.innerHTML = `
      <div class="ai-avatar-small">
        <img src="https://cdn-icons-png.flaticon.com/512/4712/4712027.png" alt="IA">
      </div>
      <div class="ai-text" data-message="${message.replace(/"/g, "&quot;")}">${messageWithLinks}</div>
    `

    // Add context menu for mobile
    if (window.innerWidth <= 768) {
      const textElement = messageDiv.querySelector(".ai-text")
      let pressTimer

      textElement.addEventListener("touchstart", (e) => {
        pressTimer = setTimeout(() => {
          showMobileContextMenu(e, message)
        }, 500)
      })

      textElement.addEventListener("touchend", () => {
        clearTimeout(pressTimer)
      })

      textElement.addEventListener("touchmove", () => {
        clearTimeout(pressTimer)
      })
    }
  }

  chatBody.appendChild(messageDiv)
  chatBody.scrollTop = chatBody.scrollHeight
}

// Get AI response
function getAIResponse(userMessage) {
  const message = userMessage.toLowerCase()

  // Card√°pio - mostrar op√ß√µes de restaurantes (manual e bot√£o)
  if (
    message.includes("card√°pio") ||
    message.includes("cardapio") ||
    message.includes("menu") ||
    message.includes("comida") ||
    message.includes("prato") ||
    message.includes("comer") ||
    message.includes("mande o card√°pio") ||
    message.includes("ver card√°pio") ||
    message.includes("mostrar card√°pio") ||
    message.includes("quero ver o card√°pio")
  ) {
    setTimeout(() => showCardapioOptions(), 500)
    return currentLanguage === "en"
      ? "Choose the restaurant to view the menu:"
      : currentLanguage === "es"
        ? "Elige el restaurante para ver el men√∫:"
        : "Escolha o restaurante para ver o card√°pio:"
  }

  // Hor√°rio de funcionamento (manual e bot√£o)
  if (
    message.includes("hor√°rio") ||
    message.includes("horario") ||
    message.includes("funcionamento") ||
    message.includes("aberto") ||
    message.includes("fecha") ||
    message.includes("abre") ||
    message.includes("que horas") ||
    message.includes("quando funciona") ||
    message.includes("hor√°rio de funcionamento") ||
    message.includes("qual hor√°rio") ||
    message.includes("opening") ||
    message.includes("hours") ||
    message.includes("open") ||
    message.includes("close") ||
    message.includes("horario") ||
    message.includes("funcionamiento") ||
    message.includes("abierto") ||
    message.includes("cierra") ||
    message.includes("abre")
  ) {
    if (currentLanguage === "en") {
      return "üïê **OPENING HOURS**\n\nüìÖ **Monday to Sunday:** 11am to 11pm\n\n‚ö†Ô∏è Some locations may have special hours on holidays.\n\nüí° **Tip:** We recommend confirming the specific hours of your chosen restaurant by contacting us!"
    } else if (currentLanguage === "es") {
      return "üïê **HORARIO DE FUNCIONAMIENTO**\n\nüìÖ **Lunes a Domingo:** 11h a 23h\n\n‚ö†Ô∏è Algunos lugares pueden tener horarios especiales en d√≠as festivos.\n\nüí° **Consejo:** ¬°Recomendamos confirmar el horario espec√≠fico del restaurante elegido contact√°ndonos!"
    } else {
      return "üïê **HOR√ÅRIO DE FUNCIONAMENTO**\n\nüìÖ **Segunda a Domingo:** 11h √†s 23h\n\n‚ö†Ô∏è Alguns locais podem ter hor√°rios especiais em feriados.\n\nüí° **Dica:** Recomendamos confirmar o hor√°rio espec√≠fico do restaurante escolhido entrando em contato conosco!"
    }
  }

  // Reservas (manual e bot√£o)
  if (
    message.includes("reserva") ||
    message.includes("reservar") ||
    message.includes("mesa") ||
    message.includes("lounge") ||
    message.includes("jacuzzi") ||
    message.includes("piscina") ||
    message.includes("como fazer reserva") ||
    message.includes("quero reservar") ||
    message.includes("fazer uma reserva") ||
    message.includes("reservation") ||
    message.includes("book") ||
    message.includes("booking") ||
    message.includes("table") ||
    message.includes("pool") ||
    message.includes("reserve")
  ) {
    if (currentLanguage === "en") {
      return `üèñÔ∏è **HOW TO MAKE YOUR RESERVATION**\n\n‚úÖ **Option 1:** Click the 'Book Now' button on our website\n‚úÖ **Option 2:** Contact us via <a href="https://api.whatsapp.com/send/?phone=5583994086376&text&type=phone_number&app_absent=0" target="_blank" style="color: #25d366; text-decoration: underline;">WhatsApp</a>\n\nüèä‚Äç‚ôÇÔ∏è **Available:**\n‚Ä¢ Lounges with Jacuzzi\n‚Ä¢ Pool Areas\n‚Ä¢ Traditional tables\n\n‚ö° It's quick and easy!`
    } else if (currentLanguage === "es") {
      return `üèñÔ∏è **C√ìMO HACER TU RESERVA**\n\n‚úÖ **Opci√≥n 1:** Haz clic en el bot√≥n 'Reservar Ya' en nuestro sitio web\n‚úÖ **Opci√≥n 2:** Cont√°ctanos por <a href="https://api.whatsapp.com/send/?phone=5583994086376&text&type=phone_number&app_absent=0" target="_blank" style="color: #25d366; text-decoration: underline;">WhatsApp</a>\n\nüèä‚Äç‚ôÇÔ∏è **Disponible:**\n‚Ä¢ Lounges con Jacuzzi\n‚Ä¢ √Åreas con Piscina\n‚Ä¢ Mesas tradicionales\n\n‚ö° ¬°Es r√°pido y f√°cil!`
    } else {
      return `üèñÔ∏è **COMO FAZER SUA RESERVA**\n\n‚úÖ **Op√ß√£o 1:** Clique no bot√£o 'Reservar j√°' no nosso site\n‚úÖ **Op√ß√£o 2:** Entre em contato pelo <a href="https://api.whatsapp.com/send/?phone=5583994086376&text&type=phone_number&app_absent=0" target="_blank" style="color: #25d366; text-decoration: underline;">WhatsApp</a>\n\nüèä‚Äç‚ôÇÔ∏è **Dispon√≠vel:**\n‚Ä¢ Lounges com Jacuzzi\n‚Ä¢ √Åreas com Piscina\n‚Ä¢ Mesas tradicionais\n\n‚ö° √â r√°pido e f√°cil!`
    }
  }

  // Localiza√ß√£o (manual e bot√£o)
  if (
    message.includes("localiza√ß√£o") ||
    message.includes("localizacao") ||
    message.includes("endere√ßo") ||
    message.includes("endereco") ||
    message.includes("onde") ||
    message.includes("fica") ||
    message.includes("local") ||
    message.includes("como chegar") ||
    message.includes("localiza√ß√£o dos restaurantes") ||
    message.includes("onde ficam") ||
    message.includes("location") ||
    message.includes("address") ||
    message.includes("where") ||
    message.includes("directions") ||
    message.includes("ubicaci√≥n") ||
    message.includes("direcci√≥n") ||
    message.includes("d√≥nde") ||
    message.includes("c√≥mo llegar")
  ) {
    if (currentLanguage === "en") {
      return `üìç **OUR RESTAURANTS**\n\nüèñÔ∏è **Fullano Praia** - Bessa, Jo√£o Pessoa\nüèùÔ∏è **Lovina Seixas** - Jo√£o Pessoa\nüê¨ **Golfinho Bar** - Jo√£o Pessoa\nüåä **Lovina Ponta de Campina** - Cabedelo\nüèúÔ∏è **Rancho da Ema** - Cabaceiras\n\n‚ú® All with privileged views and unique experiences!\n\nüì± Contact us for specific directions!`
    } else if (currentLanguage === "es") {
      return `üìç **NUESTROS RESTAURANTES**\n\nüèñÔ∏è **Fullano Praia** - Bessa, Jo√£o Pessoa\nüèùÔ∏è **Lovina Seixas** - Jo√£o Pessoa\nüê¨ **Golfinho Bar** - Jo√£o Pessoa\nüåä **Lovina Ponta de Campina** - Cabedelo\nüèúÔ∏è **Rancho da Ema** - Cabaceiras\n\n‚ú® ¬°Todos con vistas privilegiadas y experiencias √∫nicas!\n\nüì± ¬°Cont√°ctanos para direcciones espec√≠ficas!`
    } else {
      return `üìç **NOSSOS RESTAURANTES**\n\nüèñÔ∏è **Fullano Praia** - Bessa, Jo√£o Pessoa\nüèùÔ∏è **Lovina Seixas** - Jo√£o Pessoa\nüê¨ **Golfinho Bar** - Jo√£o Pessoa\nüåä **Lovina Ponta de Campina** - Cabedelo\nüèúÔ∏è **Rancho da Ema** - Cabaceiras\n\n‚ú® Todos com vista privilegiada e experi√™ncias √∫nicas!\n\nüì± Entre em contato para dire√ß√µes espec√≠ficas!`
    }
  }

  // Pre√ßos e pagamento (manual e bot√£o)
  if (
    message.includes("pre√ßo") ||
    message.includes("preco") ||
    message.includes("valor") ||
    message.includes("pagamento") ||
    message.includes("cart√£o") ||
    message.includes("cartao") ||
    message.includes("pix") ||
    message.includes("dinheiro") ||
    message.includes("quanto custa") ||
    message.includes("pre√ßos e formas de pagamento") ||
    message.includes("como pagar") ||
    message.includes("formas de pagamento") ||
    message.includes("price") ||
    message.includes("cost") ||
    message.includes("payment") ||
    message.includes("card") ||
    message.includes("cash") ||
    message.includes("precio") ||
    message.includes("costo") ||
    message.includes("pago") ||
    message.includes("tarjeta") ||
    message.includes("efectivo")
  ) {
    if (currentLanguage === "en") {
      return `üí∞ **PRICES AND PAYMENT**\n\nüíµ **Prices:** Fair and competitive\n\nüí≥ **Payment Methods:**\n‚úÖ Credit/Debit Cards\n‚úÖ PIX\n‚úÖ Cash\n‚úÖ Meal vouchers\n\nüìû Contact us for more details about specific prices!`
    } else if (currentLanguage === "es") {
      return `üí∞ **PRECIOS Y PAGO**\n\nüíµ **Precios:** Justos y competitivos\n\nüí≥ **Formas de Pago:**\n‚úÖ Tarjetas de Cr√©dito/D√©bito\n‚úÖ PIX\n‚úÖ Efectivo\n‚úÖ Vales de comida\n\nüìû ¬°Cont√°ctanos para m√°s detalles sobre precios espec√≠ficos!`
    } else {
      return `üí∞ **PRE√áOS E PAGAMENTO**\n\nüíµ **Pre√ßos:** Justos e competitivos\n\nüí≥ **Formas de Pagamento:**\n‚úÖ Cart√£o de Cr√©dito/D√©bito\n‚úÖ PIX\n‚úÖ Dinheiro\n‚úÖ Vale-refei√ß√£o\n\nüìû Entre em contato para mais detalhes sobre valores espec√≠ficos!`
    }
  }

  // Resposta padr√£o
  if (currentLanguage === "en") {
    return `‚ùì **I couldn't understand your question**\n\nFor more personalized service, contact us via <a href="https://api.whatsapp.com/send/?phone=5583994086376&text&type=phone_number&app_absent=0" target="_blank" style="color: #25d366; text-decoration: underline;">WhatsApp</a>\n\nüí° **Tip:** Try asking about menu, hours, reservations, location or prices!`
  } else if (currentLanguage === "es") {
    return `‚ùì **No pude entender tu pregunta**\n\nPara un servicio m√°s personalizado, cont√°ctanos por <a href="https://api.whatsapp.com/send/?phone=5583994086376&text&type=phone_number&app_absent=0" target="_blank" style="color: #25d366; text-decoration: underline;">WhatsApp</a>\n\nüí° **Consejo:** ¬°Intenta preguntar sobre men√∫, horarios, reservas, ubicaci√≥n o precios!`
  } else {
    return `‚ùì **N√£o consegui entender sua pergunta**\n\nPara um atendimento mais personalizado, entre em contato conosco pelo <a href="https://api.whatsapp.com/send/?phone=5583994086376&text&type=phone_number&app_absent=0" target="_blank" style="color: #25d366; text-decoration: underline;">WhatsApp</a>\n\nüí° **Dica:** Tente perguntar sobre card√°pio, hor√°rios, reservas, localiza√ß√£o ou pre√ßos!`
  }
}

// Show card√°pio options
function showCardapioOptions() {
  const chatBody = document.getElementById("aiChatBody")
  const messageDiv = document.createElement("div")
  messageDiv.className = "ai-message"

  const chooseText =
    currentLanguage === "en"
      ? "Choose the restaurant to view the menu:"
      : currentLanguage === "es"
        ? "Elige el restaurante para ver el men√∫:"
        : "Escolha o restaurante para ver o card√°pio:"

  messageDiv.innerHTML = `
    <div class="ai-avatar-small">
      <img src="https://cdn-icons-png.flaticon.com/512/4712/4712027.png" alt="IA">
    </div>
    <div class="ai-text">
      ${chooseText}
      <div class="cardapio-options">
        <button class="cardapio-option-btn" onclick="showRestaurantCardapio('Fullano Praia')">
          üèñÔ∏è Fullano Praia
        </button>
        <button class="cardapio-option-btn" onclick="showRestaurantCardapio('Golfinho Bar')">
          üê¨ Golfinho Bar
        </button>
        <button class="cardapio-option-btn" onclick="showRestaurantCardapio('Lovina Ponta de Campina')">
          üåä Lovina Ponta de Campina
        </button>
        <button class="cardapio-option-btn" onclick="showRestaurantCardapio('Lovina Seixas')">
          üèùÔ∏è Lovina Seixas
        </button>
      </div>
    </div>
  `

  chatBody.appendChild(messageDiv)
  chatBody.scrollTop = chatBody.scrollHeight
}

// Show restaurant cardapio with image and actions - IMPLEMENTA√á√ÉO CORRIGIDA
function showRestaurantCardapio(restaurantName) {
  const chatBody = document.getElementById("aiChatBody")
  const messageDiv = document.createElement("div")
  messageDiv.className = "ai-message"

  // Restaurant links
  const restaurantLinks = {
    "Fullano Praia": "https://drive.google.com/drive/folders/1D8CydBS3LXtiJzmdPiTsPBWmLlWv6Pr6?usp=drive_link",
    "Golfinho Bar": "https://drive.google.com/drive/folders/1kdPntoanLQuIV79Q-ar4_KT4eKBHbipY?usp=drive_link",
    "Lovina Ponta de Campina":
      "https://drive.google.com/drive/folders/11xXyvPlR65pPjoJ3AV69-4kZnrUOYUru?usp=drive_link",
    "Lovina Seixas": "https://drive.google.com/drive/folders/11sRNyEoRPjuuN86ZidUyHlZ2k1CJaQD_?usp=drive_link",
  }

  // CARD√ÅPIOS ESPEC√çFICOS POR RESTAURANTE - IMPLEMENTA√á√ÉO SOLICITADA
  const restaurantMenuImages = {
    "Fullano Praia": "img/cardapiofullano1",
    "Golfinho Bar": "img/cardapiogolfinho1",
    "Lovina Ponta de Campina": "img/cardapiopontadecampina1",
    "Lovina Seixas": "img/cardapioseixas1",
  }

  const link = restaurantLinks[restaurantName]
  const menuImage = (restaurantMenuImages[restaurantName] || "img/cardapiofullano") + ".png"

  const menuText = currentLanguage === "en" ? "Menu" : currentLanguage === "es" ? "Men√∫" : "Card√°pio"

  const checkMenuText =
    currentLanguage === "en"
      ? `Check out our delicious ${restaurantName} menu!`
      : currentLanguage === "es"
        ? `¬°Echa un vistazo a nuestro delicioso men√∫ de ${restaurantName}!`
        : `Confira nosso delicioso card√°pio do ${restaurantName}!`

  const viewCompleteText =
    currentLanguage === "en"
      ? "View complete menu online"
      : currentLanguage === "es"
        ? "Ver men√∫ completo online"
        : "Ver card√°pio completo online"

  const clickToEnlargeText =
    currentLanguage === "en"
      ? "Click to enlarge"
      : currentLanguage === "es"
        ? "Haz clic para ampliar"
        : "Clique para ampliar"

  messageDiv.innerHTML = `
    <div class="ai-avatar-small">
      <img src="https://cdn-icons-png.flaticon.com/512/4712/4712027.png" alt="IA">
    </div>
    <div class="ai-text">
      <div class="cardapio-card">
        <h4>üìã ${menuText} - ${restaurantName}</h4>
        <div class="cardapio-image-container">
          <img src="${menuImage}" alt="${menuText} ${restaurantName}" class="cardapio-image-small" onclick="openCardapioPreview('${menuImage}', '${restaurantName}')">
          <div class="cardapio-overlay">
            <span class="click-to-enlarge">${clickToEnlargeText}</span>
          </div>
          <div class="cardapio-actions">
            <button class="cardapio-action-btn" onclick="downloadCardapioImage('${menuImage}', '${restaurantName}')" title="Download do ${menuText}">
              <i class="fas fa-download"></i>
            </button>
            <button class="cardapio-action-btn" onclick="copyCardapioImage('${menuImage}')" title="Copiar ${menuText}">
              <i class="fas fa-copy"></i>
            </button>
          </div>
        </div>
        <p>üçΩÔ∏è ${checkMenuText}</p>
        <a href="${link}" target="_blank" class="cardapio-link">
          <i class="fas fa-external-link-alt"></i> ${viewCompleteText}
        </a>
      </div>
    </div>
  `

  chatBody.appendChild(messageDiv)
  chatBody.scrollTop = chatBody.scrollHeight
}

// CORRE√á√ÉO DO BUG DE ZOOM - IMPLEMENTA√á√ÉO COMPLETA E FUNCIONAL
function openCardapioPreview(imagePath, restaurantName) {
  const modal = document.createElement("div")
  modal.className = "cardapio-preview-modal"
  modal.id = "cardapioPreviewModal"

  const menuText = currentLanguage === "en" ? "Menu" : currentLanguage === "es" ? "Men√∫" : "Card√°pio"

  // Instru√ß√µes de zoom baseadas no dispositivo
  const zoomInstructions = getZoomInstructions()

  // In the openCardapioPreview function, replace the cardapioSlides array creation with this:

  // Criar array com 4 card√°pios diferentes para cada restaurante
  const baseImageName = imagePath.replace(".png", "").slice(0, -1) // Remove last digit from base image name
  const cardapioSlides = [
    { image: `${baseImageName}1.png`, title: `${menuText} 1` },
    { image: `${baseImageName}2.png`, title: `${menuText} 2` },
    { image: `${baseImageName}3.png`, title: `${menuText} 3` },
    { image: `${baseImageName}4.png`, title: `${menuText} 4` },
  ]

  modal.innerHTML = `
    <div class="cardapio-preview-content">
      <div class="cardapio-preview-header">
        <h3>üìã ${menuText} - ${restaurantName}</h3>
        <button class="cardapio-preview-close" onclick="closeCardapioPreview()">
          <i class="fas fa-times"></i>
        </button>
      </div>
      <div class="cardapio-preview-body">
        <div class="cardapio-carousel-container" id="cardapioCarouselContainer">
          <div class="cardapio-slide-counter" id="slideCounter">1 / 4</div>
          <div class="cardapio-carousel-track" id="cardapioCarouselTrack">
            ${cardapioSlides
              .map(
                (slide, index) => `
              <div class="cardapio-carousel-slide">
                <div class="cardapio-image-zoom-container" id="zoomContainer${index}" data-slide="${index}">
                  <img src="${slide.image}" alt="${slide.title} ${restaurantName}" class="cardapio-preview-image zoom-1x" id="zoomImage${index}">
                  <div class="zoom-indicator" id="zoomIndicator${index}">100%</div>
                </div>
              </div>
            `,
              )
              .join("")}
          </div>
          <div class="cardapio-carousel-controls">
            <button class="cardapio-nav-btn" id="prevCardapioBtn">
              <i class="fas fa-chevron-left"></i>
            </button>
            <div class="cardapio-carousel-indicators" id="cardapioIndicators">
              ${cardapioSlides
                .map(
                  (_, index) => `
                <div class="cardapio-indicator ${index === 0 ? "active" : ""}" data-slide="${index}"></div>
              `,
                )
                .join("")}
            </div>
            <button class="cardapio-nav-btn" id="nextCardapioBtn">
              <i class="fas fa-chevron-right"></i>
            </button>
          </div>
        </div>
        <div class="zoom-instructions">${zoomInstructions}</div>
        <div class="cardapio-preview-actions">
          <button class="btn-cardapio-action" onclick="downloadCurrentCardapio('${imagePath}', '${restaurantName}')">
            <i class="fas fa-download"></i> Download
          </button>
          <button class="btn-cardapio-action" onclick="copyCurrentCardapio('${imagePath}')">
            <i class="fas fa-copy"></i> ${currentLanguage === "en" ? "Copy" : currentLanguage === "es" ? "Copiar" : "Copiar"}
          </button>
        </div>
      </div>
    </div>
  `

  document.body.appendChild(modal)

  // Inicializar carrossel de card√°pios
  initializeCardapioCarousel()

  // CORRE√á√ÉO: Inicializar funcionalidade de zoom para TODOS os slides
  initializeZoomFunctionality()

  // Close on background click
  modal.addEventListener("click", (e) => {
    if (e.target === modal) {
      closeCardapioPreview()
    }
  })

  // Close on ESC key
  const escHandler = (e) => {
    if (e.key === "Escape") {
      closeCardapioPreview()
      document.removeEventListener("keydown", escHandler)
    }
  }
  document.addEventListener("keydown", escHandler)
}

// Inicializar carrossel de card√°pios
function initializeCardapioCarousel() {
  const track = document.getElementById("cardapioCarouselTrack")
  const prevBtn = document.getElementById("prevCardapioBtn")
  const nextBtn = document.getElementById("nextCardapioBtn")
  const indicators = document.querySelectorAll(".cardapio-indicator")
  const slideCounter = document.getElementById("slideCounter")

  if (!track || !prevBtn || !nextBtn) return

  let currentSlide = 0
  const totalSlides = 4
  let isTransitioning = false

  // Fun√ß√£o para atualizar o carrossel
  function updateCarousel(slideIndex, animate = true) {
    if (isTransitioning) return

    currentSlide = Math.max(0, Math.min(totalSlides - 1, slideIndex))

    if (animate) {
      isTransitioning = true
      track.style.transition = "transform 0.3s ease"
    } else {
      track.style.transition = "none"
    }

    track.style.transform = `translateX(-${currentSlide * 25}%)`

    // Atualizar indicadores
    indicators.forEach((indicator, index) => {
      indicator.classList.toggle("active", index === currentSlide)
    })

    // Atualizar contador
    slideCounter.textContent = `${currentSlide + 1} / ${totalSlides}`

    // Atualizar bot√µes
    prevBtn.disabled = currentSlide === 0
    nextBtn.disabled = currentSlide === totalSlides - 1

    if (animate) {
      setTimeout(() => {
        isTransitioning = false
      }, 300)
    }
  }

  // Event listeners para bot√µes
  prevBtn.addEventListener("click", () => {
    if (currentSlide > 0) {
      updateCarousel(currentSlide - 1)
    }
  })

  nextBtn.addEventListener("click", () => {
    if (currentSlide < totalSlides - 1) {
      updateCarousel(currentSlide + 1)
    }
  })

  // Event listeners para indicadores
  indicators.forEach((indicator, index) => {
    indicator.addEventListener("click", () => {
      updateCarousel(index)
    })
  })

  // Suporte a gestos touch/swipe
  let startX = 0
  let startY = 0
  let currentX = 0
  let currentY = 0
  let isDragging = false
  let hasMoved = false

  // Mouse events
  track.addEventListener("mousedown", (e) => {
    if (isTransitioning) return
    isDragging = true
    hasMoved = false
    startX = e.clientX
    startY = e.clientY
    track.style.cursor = "grabbing"
    e.preventDefault()
  })

  track.addEventListener("mousemove", (e) => {
    if (!isDragging || isTransitioning) return

    currentX = e.clientX
    currentY = e.clientY

    const deltaX = currentX - startX
    const deltaY = currentY - startY

    if (Math.abs(deltaX) > Math.abs(deltaY) && Math.abs(deltaX) > 10) {
      hasMoved = true
      e.preventDefault()
    }
  })

  track.addEventListener("mouseup", (e) => {
    if (isDragging && hasMoved) {
      const deltaX = currentX - startX

      if (Math.abs(deltaX) > 50) {
        if (deltaX > 0 && currentSlide > 0) {
          // Swipe para direita - slide anterior
          updateCarousel(currentSlide - 1)
        } else if (deltaX < 0 && currentSlide < totalSlides - 1) {
          // Swipe para esquerda - pr√≥ximo slide
          updateCarousel(currentSlide + 1)
        }
      }
    }

    isDragging = false
    hasMoved = false
    track.style.cursor = "grab"
  })

  track.addEventListener("mouseleave", () => {
    isDragging = false
    hasMoved = false
    track.style.cursor = "grab"
  })

  // Touch events para mobile
  track.addEventListener(
    "touchstart",
    (e) => {
      if (isTransitioning) return
      isDragging = true
      hasMoved = false
      startX = e.touches[0].clientX
      startY = e.touches[0].clientY
    },
    { passive: true },
  )

  track.addEventListener(
    "touchmove",
    (e) => {
      if (!isDragging || isTransitioning) return

      currentX = e.touches[0].clientX
      currentY = e.clientY

      const deltaX = currentX - startX
      const deltaY = currentY - startY

      if (Math.abs(deltaX) > Math.abs(deltaY) && Math.abs(deltaX) > 10) {
        hasMoved = true
        e.preventDefault()
      }
    },
    { passive: false },
  )

  track.addEventListener(
    "touchend",
    (e) => {
      if (isDragging && hasMoved && !isTransitioning) {
        const deltaX = currentX - startX

        if (Math.abs(deltaX) > 50) {
          if (deltaX > 0 && currentSlide > 0) {
            // Swipe para direita - slide anterior
            updateCarousel(currentSlide - 1)
          } else if (deltaX < 0 && currentSlide < totalSlides - 1) {
            // Swipe para esquerda - pr√≥ximo slide
            updateCarousel(currentSlide + 1)
          }
        }
      }

      isDragging = false
      hasMoved = false
    },
    { passive: true },
  )

  // Inicializar carrossel
  updateCarousel(0, false)
}

// CORRE√á√ÉO PRINCIPAL: Obter instru√ß√µes de zoom baseadas no idioma e dispositivo
function getZoomInstructions() {
  const isMobile = window.innerWidth <= 768

  if (currentLanguage === "en") {
    return isMobile ? "üì± Pinch to zoom in/out" : "üñ±Ô∏è Click to zoom in/out ‚Ä¢ Scroll to navigate when zoomed"
  } else if (currentLanguage === "es") {
    return isMobile ? "üì± Pellizca para hacer zoom" : "üñ±Ô∏è Haz clic para hacer zoom ‚Ä¢ Despl√°zate para navegar"
  } else {
    return isMobile ? "üì± Fa√ßa pin√ßa para dar zoom" : "üñ±Ô∏è Clique para dar zoom ‚Ä¢ Role para navegar quando ampliado"
  }
}

// CORRE√á√ÉO PRINCIPAL: Inicializar funcionalidade de zoom CORRIGIDA
function initializeZoomFunctionality() {
  // Inicializar zoom para todos os slides (0, 1, 2, 3)
  for (let slideIndex = 0; slideIndex < 4; slideIndex++) {
    const zoomContainer = document.getElementById(`zoomContainer${slideIndex}`)
    const zoomImage = document.getElementById(`zoomImage${slideIndex}`)
    const zoomIndicator = document.getElementById(`zoomIndicator${slideIndex}`)

    if (!zoomContainer || !zoomImage || !zoomIndicator) continue

    let currentZoom = 1
    const zoomLevels = [1, 1.5, 2, 3]
    let currentZoomIndex = 0

    // Fun√ß√£o para atualizar o zoom
    function updateZoom(newZoomIndex) {
      currentZoomIndex = Math.max(0, Math.min(zoomLevels.length - 1, newZoomIndex))
      currentZoom = zoomLevels[currentZoomIndex]

      // Remover todas as classes de zoom
      zoomImage.className = zoomImage.className.replace(/zoom-[\d\-.]+x/g, "")

      // Adicionar nova classe de zoom
      const zoomClass = `zoom-${currentZoom.toString().replace(".", "-")}x`
      zoomImage.classList.add(zoomClass)

      // Atualizar indicador
      zoomIndicator.textContent = `${Math.round(currentZoom * 100)}%`

      // Atualizar container
      if (currentZoom > 1) {
        zoomContainer.classList.add("zoomed")
        zoomContainer.style.overflow = "auto"
        zoomContainer.style.cursor = "zoom-out"
      } else {
        zoomContainer.classList.remove("zoomed")
        zoomContainer.style.overflow = "hidden"
        zoomContainer.style.cursor = "zoom-in"
      }
    }

    // DESKTOP: Click para zoom direto ao tamanho completo
    if (window.innerWidth > 768) {
      zoomContainer.addEventListener("click", (e) => {
        e.preventDefault()
        e.stopPropagation()

        // Se n√£o estiver ampliado, vai direto para o zoom m√°ximo (tamanho real)
        // Se j√° estiver ampliado, volta para o zoom m√°ximo
        if (currentZoom === 1) {
          updateZoom(zoomLevels.length - 1) // Vai direto para 3x (tamanho completo)
        } else {
          updateZoom(0) // Volta para 1x
        }
      })
    }

    // MOBILE: Toque simples para zoom direto ao tamanho completo
    let touchStartTime = 0
    let touchStartX = 0
    let touchStartY = 0

    zoomContainer.addEventListener("touchstart", (e) => {
      if (e.touches.length === 1) {
        touchStartTime = Date.now()
        touchStartX = e.touches[0].clientX
        touchStartY = e.touches[0].clientY
      }
    })

    zoomContainer.addEventListener("touchend", (e) => {
      if (e.touches.length === 0 && e.changedTouches.length === 1) {
        const touchEndTime = Date.now()
        const touchEndX = e.changedTouches[0].clientX
        const touchEndY = e.changedTouches[0].clientY

        const timeDiff = touchEndTime - touchStartTime
        const distanceX = Math.abs(touchEndX - touchStartX)
        const distanceY = Math.abs(touchEndY - touchStartY)

        // Se foi um toque r√°pido e sem movimento significativo (tap)
        if (timeDiff < 300 && distanceX < 10 && distanceY < 10) {
          e.preventDefault()

          // Se n√£o estiver ampliado, vai direto para o zoom m√°ximo
          // Se j√° estiver ampliado, volta para o tamanho normal
          if (currentZoom === 1) {
            updateZoom(zoomLevels.length - 1) // Vai direto para 3x (tamanho completo)
          } else {
            updateZoom(0) // Volta para 1x
          }
        }
      }
    })

    // MOBILE: Touch gestures para zoom (pin√ßa)
    let initialDistance = 0
    let initialZoom = 1
    let isZooming = false

    zoomContainer.addEventListener("touchstart", (e) => {
      if (e.touches.length === 2) {
        e.preventDefault()
        isZooming = true
        initialDistance = getDistance(e.touches[0], e.touches[1])
        initialZoom = currentZoom
      }
    })

    zoomContainer.addEventListener("touchmove", (e) => {
      if (e.touches.length === 2 && isZooming) {
        e.preventDefault()

        const currentDistance = getDistance(e.touches[0], e.touches[1])
        const scale = currentDistance / initialDistance
        const newZoom = initialZoom * scale

        // Encontrar o n√≠vel de zoom mais pr√≥ximo
        let closestZoomIndex = 0
        let minDiff = Math.abs(zoomLevels[0] - newZoom)

        for (let i = 1; i < zoomLevels.length; i++) {
          const diff = Math.abs(zoomLevels[i] - newZoom)
          if (diff < minDiff) {
            minDiff = diff
            closestZoomIndex = i
          }
        }

        if (closestZoomIndex !== currentZoomIndex) {
          updateZoom(closestZoomIndex)
        }
      }
    })

    zoomContainer.addEventListener("touchend", (e) => {
      if (e.touches.length < 2) {
        isZooming = false
      }
    })

    // Fun√ß√£o para calcular dist√¢ncia entre dois pontos de toque
    function getDistance(touch1, touch2) {
      const dx = touch1.clientX - touch2.clientX
      const dy = touch1.clientY - touch2.clientY
      return Math.sqrt(dx * dx + dy * dy)
    }

    // Inicializar com zoom 1x
    updateZoom(0)
  }
}

// Download do card√°pio atual
function downloadCurrentCardapio(imagePath, restaurantName) {
  const slideCounter = document.getElementById("slideCounter")
  const currentSlideNumber = slideCounter ? slideCounter.textContent.split(" / ")[0] : "1"

  const link = document.createElement("a")
  link.href = imagePath

  const menuText = currentLanguage === "en" ? "menu" : currentLanguage === "es" ? "menu" : "cardapio"

  link.download = `${menuText}-${restaurantName.toLowerCase().replace(/\s+/g, "-")}-${currentSlideNumber}.png`
  document.body.appendChild(link)
  link.click()
  document.body.removeChild(link)

  const downloadText =
    currentLanguage === "en"
      ? `üì• ${restaurantName} menu ${currentSlideNumber} downloaded successfully!`
      : currentLanguage === "es"
        ? `üì• ¬°Men√∫ ${currentSlideNumber} de ${restaurantName} descargado con √©xito!`
        : currentLanguage === "pt"
          ? `üì• Card√°pio ${currentSlideNumber} do ${restaurantName} baixado com sucesso!`
          : `üì• ${restaurantName} menu ${currentSlideNumber} downloaded successfully!`

  showToast(downloadText)
}

// Copiar card√°pio atual
async function copyCurrentCardapio(imagePath) {
  try {
    const response = await fetch(imagePath)
    const blob = await response.blob()
    await navigator.clipboard.write([new ClipboardItem({ [blob.type]: blob })])

    const slideCounter = document.getElementById("slideCounter")
    const currentSlideNumber = slideCounter ? slideCounter.textContent.split(" / ")[0] : "1"

    const copyText =
      currentLanguage === "en"
        ? "Menu ${currentSlideNumber} copied to clipboard!"
        : currentLanguage === "es"
          ? `¬°Men√∫ ${currentSlideNumber} copiado al portapapeles!`
          : currentLanguage === "pt"
            ? `Card√°pio ${currentSlideNumber} copiado para a √°rea de transfer√™ncia!`
            : "Menu ${currentSlideNumber} copied to clipboard!"

    showToast(copyText)
  } catch (err) {
    console.error("Erro ao copiar card√°pio:", err)

    const errorText =
      currentLanguage === "en"
        ? "Could not copy the menu"
        : currentLanguage === "es"
          ? "No se pudo copiar el men√∫"
          : currentLanguage === "pt"
            ? `N√£o foi poss√≠vel copiar o card√°pio`
            : "Could not copy the menu"

    showToast(errorText, "error")
  }
}

// Close cardapio preview - VERS√ÉO ATUALIZADA
function closeCardapioPreview() {
  const modal = document.getElementById("cardapioPreviewModal")
  if (modal) {
    modal.remove()
  }
}

// Download cardapio image
function downloadCardapioImage(imagePath, restaurantName) {
  const link = document.createElement("a")
  link.href = imagePath

  const menuText = currentLanguage === "en" ? "menu" : currentLanguage === "es" ? "menu" : "cardapio"

  link.download = `${menuText}-${restaurantName.toLowerCase().replace(/\s+/g, "-")}.png`
  document.body.appendChild(link)
  link.click()
  document.body.removeChild(link)

  const downloadText =
    currentLanguage === "en"
      ? `${restaurantName} menu downloaded successfully!`
      : currentLanguage === "es"
        ? `¬°Men√∫ de ${restaurantName} descargado con √©xito!`
        : currentLanguage === "pt"
          ? `Card√°pio do ${restaurantName} baixado com sucesso!`
          : `${restaurantName} menu downloaded successfully!`

  showToast(downloadText)
}

// Copy cardapio image to clipboard
async function copyCardapioImage(imagePath) {
  try {
    const response = await fetch(imagePath)
    const blob = await response.blob()
    await navigator.clipboard.write([new ClipboardItem({ [blob.type]: blob })])

    const copyText =
      currentLanguage === "en"
        ? "Menu copied to clipboard!"
        : currentLanguage === "es"
          ? `¬°Men√∫ copiado al portapapeles!`
          : currentLanguage === "pt"
            ? `Card√°pio copiado para a √°rea de transfer√™ncia!`
            : "Menu copied to clipboard!"

    showToast(copyText)
  } catch (err) {
    console.error("Erro ao copiar card√°pio:", err)

    const errorText =
      currentLanguage === "en"
        ? "Could not copy the menu"
        : currentLanguage === "es"
          ? "No se pudo copiar el men√∫"
          : currentLanguage === "pt"
            ? `N√£o foi poss√≠vel copiar o card√°pio`
            : "Could not copy the menu"

    showToast(errorText, "error")
  }
}

// Show mobile context menu
function showMobileContextMenu(event, message) {
  const existingMenu = document.querySelector(".mobile-context-menu")
  if (existingMenu) {
    existingMenu.remove()
  }

  const contextMenu = document.createElement("div")
  contextMenu.className = "mobile-context-menu"

  const copyText =
    currentLanguage === "en" ? "Copy message" : currentLanguage === "es" ? "Copiar mensaje" : "Copiar mensagem"

  contextMenu.innerHTML =
    `
    <button class="context-menu-item" onclick="copyMessageToClipboard(&quot;` +
    message.replace(/'/g, "\\'") +
    `&quot;)">
      <i class="fas fa-copy"></i> ` +
    copyText +
    `
    </button>
  `

  document.body.appendChild(contextMenu)

  const touch = event.touches[0]
  contextMenu.style.left = touch.clientX + "px"
  contextMenu.style.top = touch.clientY + "px"

  // Remove menu when clicking elsewhere
  setTimeout(() => {
    document.addEventListener(
      "click",
      () => {
        contextMenu.remove()
      },
      { once: true },
    )
  }, 100)
}

// Copy message to clipboard
function copyMessageToClipboard(message) {
  const cleanMessage = message.replace(/<[^>]*>/g, "") // Remove HTML tags
  navigator.clipboard.writeText(cleanMessage).then(() => {
    const copiedText =
      currentLanguage === "en"
        ? "Message copied!"
        : currentLanguage === "es"
          ? `¬°Mensaje copiado!`
          : currentLanguage === "pt"
            ? `Mensagem copiada!`
            : "Message copied!"
    showToast(copiedText)
  })
}

// SISTEMA DE CONTROLE DE HOVER MELHORADO - Evita conflitos
const hoverTimeouts = {
  testimonials: null,
  gallery: null,
}

// Pause auto-advance on hover and manual interaction
document.addEventListener("DOMContentLoaded", () => {
  const testimonialsSection = document.querySelector(".testimonials")
  const gallerySection = document.querySelector(".gallery")

  if (testimonialsSection) {
    testimonialsSection.addEventListener("mouseenter", () => {
      console.log("üñ±Ô∏è Mouse entrou na se√ß√£o testimonials") // Debug

      // Limpar timeout anterior se existir
      if (hoverTimeouts.testimonials) {
        clearTimeout(hoverTimeouts.testimonials)
      }

      pauseAutoAdvance()
    })

    testimonialsSection.addEventListener("mouseleave", () => {
      console.log("üñ±Ô∏è Mouse saiu da se√ß√£o testimonials") // Debug

      // Usar timeout para evitar reativa√ß√µes muito r√°pidas
      hoverTimeouts.testimonials = setTimeout(() => {
        if (!isAutoAdvanceActive) {
          isAutoAdvanceActive = true
          startAutoAdvance()
        }
      }, 500)
    })
  }

  if (gallerySection) {
    gallerySection.addEventListener("mouseenter", () => {
      console.log("üñ±Ô∏è Mouse entrou na se√ß√£o gallery") // Debug

      // Limpar timeout anterior se existir
      if (hoverTimeouts.gallery) {
        clearTimeout(hoverTimeouts.gallery)
      }

      pauseAutoAdvance()
    })

    gallerySection.addEventListener("mouseleave", () => {
      console.log("üñ±Ô∏è Mouse saiu da se√ß√£o gallery") // Debug

      // Usar timeout para evitar reativa√ß√µes muito r√°pidas
      hoverTimeouts.gallery = setTimeout(() => {
        if (!isAutoAdvanceActive) {
          isAutoAdvanceActive = true
          startAutoAdvance()
        }
      }, 500)
    })
  }

  // Start auto-advance inicial
  startAutoAdvance()
})

// Smooth scrolling for navigation links
document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
  anchor.addEventListener("click", function (e) {
    e.preventDefault()
    const target = document.querySelector(this.getAttribute("href"))
    if (target) {
      target.scrollIntoView({
        behavior: "smooth",
        block: "start",
      })
    }
  })
})

// Initialize everything
document.addEventListener("DOMContentLoaded", () => {
  // NOVA FUNCIONALIDADE: Verificar expira√ß√£o do lead capture e inicializar cookies
  checkLeadCaptureExpiration()
  initializeCookieNotification()

  populateLocations()
  populateTestimonials()
  populateGallery()
  populateFAQ()
  populateAIQuestions()
  createTestimonialIndicators()
  createGalleryIndicators()
  setupLanguageSelector()
  setupFloatingButtons()
  initializeLanguageSystem()

  // INICIALIZAR FUNCIONALIDADE DE SWIPE
  initializeSwipeCarousels()

  // Add event listeners for carousel buttons
  document.getElementById("prevBtn").addEventListener("click", () => {
    prevTestimonials()
    pauseAutoAdvance()
  })
  document.getElementById("nextBtn").addEventListener("click", () => {
    nextTestimonials()
    pauseAutoAdvance()
  })
  document.getElementById("prevGalleryBtn").addEventListener("click", () => {
    prevGallery()
    pauseAutoAdvance()
  })
  document.getElementById("nextGalleryBtn").addEventListener("click", () => {
    nextGallery()
    pauseAutoAdvance()
  })
})

// Header scroll effect
window.addEventListener("scroll", () => {
  const header = document.querySelector(".header")
  if (window.scrollY > 100) {
    if (body.classList.contains("dark-mode")) {
      header.style.background = "rgba(10, 21, 37, 0.95)" // Usando #0a1525 com transpar√™ncia
    } else {
      header.style.background = "rgba(255, 255, 255, 0.95)"
    }
    header.style.backdropFilter = "blur(10px)"
  } else {
    if (body.classList.contains("dark-mode")) {
      header.style.background = "#0a1525" // Cor correta do tema escuro
    } else {
      header.style.background = "white"
    }
    header.style.backdropFilter = "none"
  }
})

// Sistema de Analytics Simplificado (apenas tracking discreto)
function initSimpleAnalytics() {
  // Sistema b√°sico de tracking que n√£o interfere na experi√™ncia do usu√°rio
  if (!window.grupofullanoAnalytics) {
    window.grupofullanoAnalytics = {
      trackVisit: function () {
        const visit = {
          timestamp: new Date().toISOString(),
          page: window.location.pathname,
          referrer: document.referrer,
          userAgent: navigator.userAgent,
          language: navigator.language,
          screenResolution: `${screen.width}x${screen.height}`,
          sessionId: this.getSessionId(),
          device: this.getDeviceType(),
        }

        const analytics = JSON.parse(
          localStorage.getItem("grupofullano_analytics") ||
            '{"visitors":[],"chatbotInteractions":[],"devices":{},"locations":{},"pages":{}}',
        )

        analytics.visitors.push(visit)
        analytics.devices[visit.device] = (analytics.devices[visit.device] || 0) + 1
        analytics.pages[visit.page] = analytics.pages[visit.page] || { views: 0, totalTime: 0, bounces: 0 }
        analytics.pages[visit.page].views++

        localStorage.setItem("grupofullano_analytics", JSON.stringify(analytics))
      },

      trackChatbotInteraction: function (question, answer) {
        const interaction = {
          timestamp: new Date().toISOString(),
          question: question,
          answer: answer,
          sessionId: this.getSessionId(),
        }

        const analytics = JSON.parse(
          localStorage.getItem("grupofullano_analytics") ||
            '{"visitors":[],"chatbotInteractions":[],"devices":{},"locations":{},"pages":{}}',
        )
        analytics.chatbotInteractions.push(interaction)
        localStorage.setItem("grupofullano_analytics", JSON.stringify(analytics))
      },

      getSessionId: () => {
        let sessionId = sessionStorage.getItem("analytics_session_id")
        if (!sessionId) {
          sessionId = "session_" + Date.now() + "_" + Math.random().toString(36).substr(2, 9)
          sessionStorage.setItem("analytics_session_id", sessionId)
        }
        return sessionId
      },

      getDeviceType: () => {
        const userAgent = navigator.userAgent.toLowerCase()
        if (/mobile|android|iphone|ipad|phone/i.test(userAgent)) {
          return "Mobile"
        } else if (/tablet|ipad/i.test(userAgent)) {
          return "Tablet"
        } else {
          return "Desktop"
        }
      },
    }
  }

  // Registrar visita de forma discreta
  window.grupofullanoAnalytics.trackVisit()
}

// Inicializar analytics discreto quando a p√°gina carregar
initSimpleAnalytics()
